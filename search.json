[{"title":"红烧带鱼","path":"/posts/40934/","content":"调料盐、黄酒、胡椒粉猪油、葱、姜、蒜黄酒、醋、糖、生抽、老抽实际上，我没找到胡椒粉、猪油、葱，味道也不差。 处理食材带鱼切成段，洗净骨血，用盐、黄酒、胡椒粉腌制十分钟蒜、姜拍碎，切成小粒，大葱斜切成片 做法热锅凉油，小火，将带鱼块煎至定型新锅，猪油炒葱、姜、蒜倒入带鱼块，烹酒点醋，加入生抽、少量老抽加入热水、盐、糖，收汁 成品焦糖色，内部白嫩，带鱼腥味基本去净，味鲜，微微酸甜 视频教程"},{"title":"青铜骑士","path":"/posts/47683/","content":"前记：这篇故事所叙述的事件是以事实为根据的。洪水泛滥的详情引自当时报刊的记载。好奇的读者可以参看B .H.伯尔赫的记事便知其详。 青铜骑士普希金著 查良铮译楔 子那里，在寥廓的海波之旁 他站着，充满了伟大的思想， 向远方凝视。在他前面 河水广阔地奔流；独木船 在波涛上摇荡，凄凉而孤单。 在铺满青苔的潮湿的岸沿， 黝黑的茅屋东一处，西一处， 贫苦的芬兰人在那里栖身。 太阳躲进了一片浓雾。 从没有见过阳光的森林 在四周喧哗。 而他想道： 我们就要从这里威胁瑞典。 在这里就要建立起城堡， 使傲慢的邻邦感到难堪。 大自然在这里设好了窗口， 我们打开它便通向欧洲。 就在海边，我们要站稳脚步。 各国的船帆将要来汇集， 在这新的海程上游历， 而我们将在海空里欢舞。 一百年过去了，年轻的城 成了北国的明珠和奇迹， 从幽暗的树林，从沼泽中， 它把灿烂的，傲岸的头高耸； 这里原只有芬兰的渔民， 像是自然的继子，郁郁寡欢， 孤单的，靠近低湿的河岸 把他那破旧的鱼网投进 幽深莫测的水里。可是如今 海岸上却充满了生气， 匀称整齐的宫殿和高阁 拥聚在一起，成群的 大船，从世界每个角落 奔向这豪富的港口停泊。 涅瓦河披上大理石的外衣， 高大的桥梁横跨过水波, 河心的小岛遮遮掩掩， ‘ 遮进了一片浓绿的花园, 而在这年轻的都城旁边 古老的莫斯科日趋暗淡， 有如寡居的太后站在 刚刚加冕的女皇前面。 我爱你，彼得兴建的城， 我爱你严肃整齐的面容， 涅瓦河的水流多么庄严， 大理石铺在它的两岸； 我爱你铁栏杆的花纹， 你沉思的没有月光的夜晚, 那透明而又闪耀的幽暗。 常常，我独自坐在屋子里, 不用点灯，写作或读书， 我清楚地看见条条街路 在静静地安睡。我看见 海军部的塔尖多么明亮。 在金光灿烂的天空，当黑夜 还来不及把帐幕拉上， 曙光却已一线接着一线， 让黑夜只停留半个钟点。 我爱你的冷酷的冬天， 你的冰霜和凝结的空气， 多少雪橇奔驰在涅瓦河边， 少女的脸比玫瑰更为艳丽； 还有舞会的笑闹和窃窃私语， 单身汉在深夜的豪饮狂欢， 酒杯冒着泡沫，丝丝地响, 彭式酒流着蓝色的火焰。 我爱你的战神的操场 青年军人的英武的演习, 步兵和骑兵列阵成行， 单调中另有一种壮丽. 呵，在栉比的行列中，飘扬着 多少碎裂的，胜利的军旗， 还有在战斗中打穿的钢盔， 也给行列带来耀目的光辉。 我爱你，俄罗斯的军事重镇， 我爱你的堡垒巨炮轰鸣， 当北国的皇后传来喜讯： 一个太子在宫廷里诞生； 或者俄罗斯战败了敌人， 又一次庆祝她的光荣； 或者是涅瓦河冰冻崩裂， 蓝色的冰块向大海倾泻， 因为感到春意，欢声雷动。 巍然矗立吧，彼得的城! 像俄罗斯一样的屹立不动； 总有一天，连自然的威力 也将要对你俯首屈膝。 让芬兰的海波永远忘记 它古代的屈服和敌意， 再不要挑动枉然的刀兵 惊扰彼得的永恒的梦。 然而，有过一个可怕的时辰， 人们还能够清晰地记忆…… 关于这；亲爱的读者，我将对你 叙述如下的一段事情, 我的故事可是异常的忧郁.第一部在幽暗的彼得堡的天空吹着十一月的寒冷的秋风涅瓦河涌起轰响的巨浪冲击着整齐的石铺的岸墙河水激动着旋转着像是病人在她的床上不断地翻腾这时候天色已晚在昏黑中雨点急骤地敲打窗户而风愁惨地吹扫吼吼地嘶鸣这时候刚刚做客归来回到家门有一个青年名叫欧根我们要用这个名字称呼故事的主人公因为我喜欢它的音调并且曾有一度它和我的笔结过不解的因缘他姓什么我们不想再钻研尽管这姓氏也许在过去一度出现在显赫的门第甚至于史家克拉姆金也许在笔下使这一族扬名但是如今上流社会和传闻却早把它忘得干干净净我们的主角在某一处任职住在科隆那一个要人也不认识他既不向往死去的祖先也没有叹息已逝的流年好了既回到了家欧根扔开外套脱下衣服上了床但是睡眠他却不能他的脑海里翻腾着不少事情他想什么呢原来在盘算他是多么微贱和贫寒他必须辛辛苦苦才能期望一个安定的生活一点荣誉但愿上帝仁慈多给他一些金钱和智慧他想起也有些花天酒地的富翁那些头脑并不高明的懒虫他们的生活却多么适意而他任职总共才只两年他的思虑又转向天气风雨还没有停息傍近河沿波涛不断地上涨几乎冲去涅瓦河的桥使交通中断他想到巴娜莎那怎么办和她就要两天或三天不见想到这里欧根衷心地痛惜并且像诗人一样幻想下去我能结婚吗为什么不自然这可能是非常艰苦我准备操劳日夜不停总会有个办法安置个家使它简单安恬并不奢华在那里安置下我的巴娜莎也许过那么一年两载就会找到差使把家事交给巴娜莎管理和主持并且教育我们的小孩就这样我们活着手拉着手生死相共到死也不分离教子孙把我们埋在一起他想着一夜想个不停他忧郁并且衷心地期望秋风不要嚎得这样愁人雨点也不要打在窗上这样无情但是睡眠终于合上他的眼睛呵看幽暗的风雨夜已渐渐消逝让惨淡的白日接着统治悲惨的白日涅瓦河一整夜抗拒着风暴向大海倾泻但终于敌不过它的暴力和它搏斗已用尽了力气次日清早在河水的两岸成群的居民汇集举目遥望他们观赏着水花的泼溅和汹涌的排山倒海的巨浪但是从海湾吹来猛烈的风顶住了水流不能前行她翻来覆去愤怒咆哮她退回淹没河心的小岛这时候天时更为凶险咆哮的涅瓦不断上升她沸腾得像是一壶滚水像是野兽猛然发了疯突地向城市扑去在她面前一切让开路她的周围立刻是死寂和荒凉洪水灌进了地窖爬过门槛运河也涌上了它的铁栏看彼得堡像传说的人鱼她的半截身子浸在水里呵围攻偷袭邪恶的波浪像盗贼似地爬进门窗小船一摆船尾把玻璃撞碎摊贩的木板上裹着布帷残破的草房木片屋檐小本生意的什物杂件贫穷人家的所有资财雷雨摧毁的桥梁的碎片和从坟墓冲出的棺材一切都飘浮在街上人民 眼见上苍的愤怒等待死亡唉一切都完了衣食和房间哪儿去找那是悲惨的一年我们的沙皇还正光芒万丈统治着俄罗斯他出现在凉台上忧郁迷惆他说沙皇可不能管辖冥冥中的自然力他坐下他以悲伤的眼睛沉思地遥望那险恶危殆的灾区以前的广场已变为湖泽条条大河是以前的街衢而皇宫像是阴沉的岛国处在大水中沙皇只开口说了句话请看他的将军他们便东西南北遍及全城有的走向大街有的穿过小弄在波涛里出入奋不顾身搭救那被洪水吓呆的游魂那等着淹没在家门的居民那时候在彼得广场的一角一所新的巨厦刚刚盖好在高大的阶台上一对石狮像活的一样张牙舞爪在门口把守可怜的欧根他的两手在胸前十字交叉没戴帽子苍白得可怕正静静地坐在石狮背上动也不动然而这可怜人并没有为自己恐惧任波浪怎样贪婪地拍打溅到脚跟他并没有听见没有留心任雨点怎样淋湿着脸怒吼的风怎样摆出威严并且把他的帽子吹到天空他只把自己忧郁的眼睛凝固在一个遥远的方向在那里山峰似的波浪仿佛是从汹涌的海底翻腾上来把一切冲掉那里暴风雨在怒号那里房屋的碎片在浮荡而就在巨浪近处呵天天就在那海湾的旁边一棵垂柳一道简陋的篱墙墙里有破旧的小屋住着一家母女两人住着他的巴娜莎他的美梦难道是在梦里他看见这一切难道人生只是一场空一个春梦或是上天对我们的嘲弄这时候他好像是中了魔魅好像是和石狮结为一体不能够下来在他周围再没有别的只是水水而上面在那稳固的高空超然于河水的旋流急浪背对着欧根以手挥向无际的远方坚定肃静是骑着青铜巨马的人像第二部但如今涅瓦河发够了脾气暴虐和破坏已使她厌腻终于回转来却一路欣赏自己的横暴造成的情景并且把虏获随处抛扬这好像是盗匪的首领带着一队人马突入村镇他们凶残地打家劫舍杀烧和虏掠哭号愤恨詈骂和扭打天大的灾祸一切做完强盗迅速撤退害怕追兵又因为满载而归不胜疲劳便在一路抛下他们劫来的财物洪水撤退了石铺的路已经呈现而我的欧根心怀着忧思希望和恐怖一路奔跑着像失了魂跑向那尚未平伏的河身那里像在得意刚才的胜利怒吼的波浪仍旧在翻腾水面上仍旧滚满了汽泡像是有炉火在下面燃烧像是战马刚刚回归阵地涅瓦河是这样急促地喘息欧根远望着看见一只船仿佛获得了意外的发现他一面追去一面叫喊摆渡的船夫正自悠闲情愿只要几个铜板把他渡过波涛的彼岸和波涛搏斗了很长时间看那小船老是没入浪里一连串的波浪就要打翻大胆的搭客但终于他来到对岸这不幸的人跑过所有熟悉的街巷去到他熟悉的地方举目四望却再也不认识呵可怕的景象在他眼前一切都很零乱这里一片荒凉那里一堆破烂房屋变了形状有的完全倾圮了另外一些被洪水搬了地方而且像是战场上横陈着尸身他一眼看见周围的死人一阵昏眩他什么也没想尽管苦难的折磨已使他疲弱却飞快地跑去到那地方那里不可知的命运正在期待像是密封的信函等他拆开看这里他跑过城郊这里是海湾附近便是他熟悉的房子它怎样了他站住他转来转去又走回原处看一看转过身仔细观察就在这里应该是她的家这里是柳树原来有篱墙显然洪水已经把它扫光但哪里有房子他迷惘他踱来踱去想了又想自言自语高声说个不住而突然用手拍着前额他大笑起来夜的帷幕向战栗的城轻轻垂落但它的居民却在谈论白天所发生的一切不幸久久不能安睡破晓的光透过疲惫而苍白的云彩流入安静的都城这光亮已不能找到昨天的灾害留下的痕迹一片紫红遮盖了丑恶的形象一切事情和从前一样有条理地进行在那畅达无阻的街心人们依旧带着漠然的表情面对面走过去那些官员也放弃了昨夜隐蔽的桃源到衙门正式办公勇敢的小贩丝毫没有丧气把地窖又从涅瓦河的手里接管并且希望以邻居的钱包填补自己重大的亏空小船一只只从院子搬出去末了瓦斯托夫男爵天宠的诗人也已吟唱了不朽的诗章对涅瓦河的灾难表示哀伤但是我可怜的可怜的欧根唉他的脆弱而迷乱的神经却经不住这可怕的打击那涅瓦河的吼吼的风声和翻天巨浪还在他的耳际不断地轰鸣有什么恶梦撕裂他的神志恐怖的思想紧抓着他他只无言地游荡一礼拜一个月转瞬已过他从来没有回到家稍坐他那幽僻的小屋既然租期已满又没付租钱一个穷诗人便来做了房客欧根从此没有回来连衣物也不要了整天地流浪很快的世界便把他遗忘夜晚他睡在码头从窗户扔出的面包就是他的食物他所穿的衣服原已破旧这时更是稀烂一些顽童朝他的背影扔着石头更常常的马车夫的皮鞭抽在他身上因为显然他一点也不辨认路径茫然无感内心的风暴使他听不见外界的闹声就这样他拖着一个躯壳度过悲惨的岁月既不像人又不像野兽既不像生灵又不像阴间的鬼魂有一晚他睡在涅瓦河的码头上夏令正渐渐地转为秋天吹起了冷风黝黑的波浪扑向码头打着光滑的阶沿那声音像是幽诉和低怨像是含冤的人在哀求法官靠在他紧闭不动的门前欧根惊醒来周围异常黑暗雨在淋漓风吹得非常凄惨在阴暗的远处一个岗哨正远隔着夜雾朝他高呼欧根吃了一惊过去的恐怖重又在眼前浮现他连忙爬起来到街上流浪忽然他站住了睁大眼睛静静扫视着四周的情景脸上露着失魂的惊惶他到了哪里眼前又是巨厦的石柱和一对石狮张牙舞爪和活的一样把守在高大的阶台之上而笔直的在幽暗的高空在石栏里面纹丝不动正是骑着铜马的巨人以手挥向无际的远方欧根不由得战栗他脑中有些思想可怕的分明他知道就在这里洪水泛滥就在这里贪婪的波浪包围他向他恶意地侵凌包围着他石狮和广场和那坚定的矗立的人以铜的头颅伸向苍穹就是这个人按照他的意志在海岸上建立了一个城看在幽暗里他是多么可怕他的额际飘浮着怎样的思想他掌握着怎样的力量那匹马燃烧着怎样的烈焰呵高傲的马你将奔向何方你的蹄子将往哪里飞扬呵你命运的有力的主宰不正是这样一手握着铁缰你勒住俄罗斯在悬崖上面使她扬起前蹄站在高岗这可怜的发疯的欧根尽绕着铜像的脚边环行他以惶惑的眼睛注视着那统治半个世界的国君但他的目光忽然昏暗胸口感到窒息他把额角贴靠着冰冷的栏杆他的心里奔腾着火焰他的血滚沸而突然沉郁地他站在高傲的铜像前面咬紧牙齿握着拳头像突然有什么魔鬼附体他全身战栗地低声诅咒好呵建设家你创造的奇迹等着我的说罢转过头便飞快地逃去因为这时候他似乎看见威严的皇帝突然间怒气冲冲无声地把他的脸转向欧根而当他穿过广场逃奔在空旷的广场上他却听见仿佛背后霹雳一声雷鸣仿佛有匹快马向他追赶石路上响着清脆的蹄声在他身后在苍白的月色下看青铜骑士骑着快马一面以手挥向高空一面赶他这可怜的疯人这一夜无论跑到什么地方他总听见骑马的铜像追赶他响着清脆的蹄声从那时候起只要欧根由于偶然的机会路过广场他的脸上便显出慌张惶惑的神情他会把手迅速地放在自己的胸口好像去抚摸那里的创伤并且脱下破旧的小帽低着头露着困窘的目光绕一条小道溜去在海滨有一个小岛迟归的渔人有时候把船在那里停泊一面晾着鱼网一面烧着他们简陋的晚餐或者礼拜天一些官员划着小船游经这里便到岛上休憩它非常荒凉甚至没有一根草在那里滋生洪水的泛滥游戏似的把一间旧茅屋冲流在那里在那水边它便停留着像一丛灌木去年春天来了一只大船把破烂的茅屋移去那里面一无所有但是在门口我们的疯人却被人发现自然人们看在上帝的面上把这僵冷的尸体赶快就地埋葬(写于1833年，来自互联网)"},{"title":"🏃留下跑步的脚印","path":"/posts/5481/","content":"有一个GitHub项目叫做Run Page，它可以将你运动App中的跑步数据导出，在博客中展示出来，支持的App有Keep、Nike等。 跑步打卡跑步路线图 使用 原仓库中含有作者的跑步数据，可以用来调试程序。克隆仓库到本地，运行后面的命令。运行成功后，可以打开网页 http://localhost:8000/ 浏览。此时网页的内容与 https://running-page.vercel.app 一致。 git clone https://github.com/yihong0618/running_page.gitpip3 install -r requirements.txtyarn installyarn develop 与个人跑步数据相关的文件为src/static/activities.json和scripts/data.db，可以删除，下载并生成自己的跑步数据。如果使用的是Keep，运行python脚本文件scripts/keep_sync.py更新数据。通过命令yarn develop重新部署网站即可预览我们自己的跑步数据了。 python3 scripts/keep_sync.py [注册keep账号的手机号] [keep账号的密码] 通过GitHub Action定时更新跑步数据。yml文件中需要修改的地方我已经列出来了。 .github/workflows/run_data_sync.yml# 省略...env: # please change to your own config. RUN_TYPE: keep # 运动App ATHLETE: shaoyaoqian # 名字 TITLE: shaoyaoqian Running MIN_GRID_DISTANCE: 1 # change min distance here TITLE_GRID: Over 1km Runs # also here GITHUB_NAME: shaoyaoqian GITHUB_EMAIL: mpf_npu@icloud.com# 省略... - name: Run sync Keep script if: env.RUN_TYPE == &#x27;keep&#x27; run: | python scripts/keep_sync.py [注册keep账号的手机号] [keep账号的密码] --with-gpx 跑步打卡和跑步路线图是svg格式的，在assets目录下，随跑步数据更新而更新。这两个文件可直接在GitHub仓库中查看，将它们放在自己博客中就行。 ![](https://raw.githubusercontent.com/shaoyaoqian/running_page/master/assets/github.svg)![](https://raw.githubusercontent.com/shaoyaoqian/running_page/master/assets/grid.svg) 其他 Run Page 可以作为独立的网站通过vercel部署，需修改文件gatsby-config.js中的相关设置。"},{"title":"无症状感染者","path":"/posts/28076/","content":"什么是无症状感染者？ 我是在那次上海疫情中听说这个词的，后面听得越来越多。在全员核酸的背景下，我一直以为无症状感染者是那些核酸阳性，但是没有发热咳嗽的那些人。现在放开以后，通过观察我身边的人，大部分人感染了新冠病毒后都会发烧咳嗽，家里一个人感染了，那么几乎全家人都会有发烧咳嗽，真正无症状的人是少数的。反正我觉得自己被那些数据骗了，怎么可能大部分人无症状。 我一个朋友跟我说，无症状是指肺部无症状，给我发了一个知乎链接，里面对比了一些官方文件中对无症状感染者的定义，每个版本都有细微变化，核心是指肺部无症状。但是里面列举的文件我都打不开，我只找到《新型冠状病毒肺炎诊疗方案（第九版）》，我就重点研究了一下这个文件。 这个文件里没有定义无症状感染者，只定义了轻型患者。一个人被归为轻型患者，那应该就是确诊了吧，轻型患者的肺部影像学检查未见肺炎表现。到这里，我又不明白了，每天播报数据时，确诊和无症状是分开的，应该不会有一个人既是无症状感染者，又被确诊为轻型患者吧？ 唯一合理的解释就是，普通型和重型患者归为确诊病例，除了确诊病例和疑似病例，所有核酸阳性的人(包括轻型患者)统称为无症状感染者，是这样吗？ 我能分清疑似和确诊，当时武汉疫情刚开始时，因为核酸检测的能力有限，很多患者无法进行核酸检测，只能被归为疑似。但是无症状和确诊我真的分不清了。","categories":["胡言乱语"]},{"title":"在博客中发说说","path":"/posts/1698/","content":"🤞功能强大 支持Markdown，理论上支持任何HTML内容。 🎁简单方便 手机微信端直接发送文字、图片、视频，并同步博客显示。 🤖无需后台 有微信账号和GitHub账号即可体验所有功能。 前言 什么是IA(Issues Anywhere) Talk ？ IA talk 利用手机微信发布碎片化思想，并同步至博客。说说的内容存储于 GitHub 仓库和 GitHub Issues，无需使用第三方存储服务。 特性 无论何时何地都能通过手机微信将消息发送至博客，支持文字、图片、视频，文本撰写可采用Markdown格式。当前为初步版本，后续功能请见开发计划 原理 本项目实现了公众号服务器端的代码，代码仓库为issues-anywhere，实现的细节参见我另一篇博客：通过微信公众号在博客中发布动态，以及 Hexo Stellar 主题下的讨论。 支持 目前仅支持在 Hexo Stellar 主题使用，通过timeline插件将说说加入文档，请看示例👇。 &#123;% timeline user:[用户名] api:https://api.github.com/repos/[用户名]/[仓库名]/issues %&#125;&#123;% endtimeline %&#125; 快速开始 安装GitHub App 新建一个GitHub仓库。安装应用wechat-to-issues，只授权你刚创建的仓库，服务器会获取你的 GitHub ID、username、access token。 关注公众号 GitHub App 安装成功后，根据提示关注公众号，服务器会获取你的 wechat ID 。之后，你向公众号发送的消息会同步到shaoyaoqian/MerryJingle这个仓库的issue中。如果你想将消息同步到自己的仓库下，那么需要绑定仓库。 发送消息 微信公众号会缓存你发送的消息。当你发送发送指令或者放弃指令时，微信公众号会清空缓存，并执行相应的指令，请看示例: https://github.com/shaoyaoqian/MerryJingle/issues/119 。 绑定仓库 绑定仓库的指令为di3a，向公众号发送 di3a仓库名以绑定仓库。 在博客正文中插入 &#123;% timeline user:[用户名] api:https://api.github.com/repos/[用户名]/[仓库名]/issues %&#125;&#123;% endtimeline %&#125; 可选配置 删除账号 数据库中会保存你的GitHub ID, 用户名, access token, wechat ID 等。你可以向微信公众号发送删除账号删除数据库中你的数据。 数据仓库 图片、视频等文件会保存在你设置的issue仓库中，如果要将他们上传到另外一个仓库中，你可以向公众号发送aap2仓库名设定数据仓库 设置CDN 图片、视频等文件的默认链接为https://raw.githubusercontent.com/&#123;owner&#125;/&#123;repo&#125;/main/&#123;path&#125;/&#123;filename&#125;。你可以将它们改成公用CDN： https://cdn.jsdelivr.net/gh/&#123;owner&#125;/&#123;repo&#125;/&#123;path&#125;/&#123;filename&#125;或者自己购买的CDN服务：https://images.yourdomain.cn/&#123;path&#125;/&#123;filename&#125;。 开发计划 IA Talk 现在仍处于开发阶段，这里有一些目前还不支持、但已经在计划中的特性： 添加一个json配置文件 其他暂无，欢迎提出建议 文档撰写参考了BBTALK，下面这些是草稿，先不要看。 隐私说明 数据的存储： 文本消息会在公众号服务器的内存中临时存储。照片、视频等数据需要先从微信服务器下载到公众号服务器上，然后上传到你自己的GitHub仓库中，因此这些数据会在服务器硬盘中临时存储。微信服务器保存了你给公众号发送的消息，我可以翻看历史。我不知道它会保存多久。 数据传输： 需要注意的是，公众号服务器和微信服务只之间的传输暂未使用https，传输数据暂时没有加密。 微信账号： 需要知道wechat id，不会向你申请任何其他个人信息。在公众号网页上能看到你的微信名和头像，但不会看到你的微信账号及其他个人信息。本服务是单向的，只有当你主动向公众号发送消息时，公众号才会被动发送一条消息。 GitHub账号： 通过Oauth认证登陆后，公众号能够获取你的公开信息，并能够以用你GitHub账号在一个公用仓库下开issue。如果你授权了一个仓库的读写权限，那么公众号可以以你的身份上传文件到你的仓库、在仓库下开issue。"},{"title":"如何写好GIT的提交信息","path":"/posts/58849/","content":"糟糕的提交信息清晰详细的提交信 10 个 Commit 规则 提交消息由 Header (主题)、Body(详细描述) 和 Footer (脚注)组成，Body 和 Footer 都是可选的。 将 Header 行 限制为 50 个字符。 主题是最能总结提交中所做更改的一行。 总结提交的行为在任何版本控制系统中都是一种固有的好习惯。它可以帮助其他人（或后来的您）更快地找到相关的提交。 将主题行的第一个字母大写。 不要在主题行的末尾加上句点 (.)。 在 Header 和 Body 以及 Footer 之间放置一个空行。 将 Header 与 Body 分开的空行很重要（除非您完全省略正文）Footer 也应通过空行与正文分开。 Body 的行宽不要超过 72 个字符处。 Body 用于提供有关 commmit 中所做更改的更多详细信息。 用项目任务号写commit 的 Body（可选）。 以项目任务号编写时，提交主体看起来很干净。 使用祈使语气 示例：Add 而不是 Added， Fix 而不是 Fixed, Fixes → 主题行使用现在时命令式，正文使用现在时态 描述&quot;什么&quot;和&quot;为什么&quot;，但不描述&quot;如何&quot;。 可以提及更改了哪个组件。 只关注目的，而不是实现。 大多数现代错误跟踪和项目管理系统都提供了与源代码控制存储库的集成，但即使它们没有集成，你仍然可以在提交消息放上 task/ticket 编号。 在 Footer 中 包含 ticket 号或者 issue no.（如果有的话）。 Footer 位于 Body 正下方，是引用与提交更改相关的问题的地方。如在 GitHub 中的 issue no.，JIRA 中的 ticket 号。 Commit 提交规范 除了上面介绍这10个基本commit message 规则。很多开源项目会在CONTRIBUTING 中说明它们采用的commit message格式，大同小异。Angular团队推出的conventional-changelog 最为有名，使用最广泛 http://suo.im/4rsYee。 Commit message 包括三个部分：Header，Body 和 Footer。完整格式如下： &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt; 1) type 提交 commit 的类型，包括以下几种 - feat: 新功能 - fix: 修复问题 - docs: 修改文档 - style: 修改代码格式，不影响代码逻辑 - refactor: 重构代码，理论上不影响现有功能 - perf: 提升性能 - test: 增加修改测试用例 - chore: 修改工具相关（包括但不限于文档、代码生成等） 2) scope 修改文件的范围，比如：视图层、控制层、docs、config, plugin 3) subject - subject 是 commit 目的的简短描述（用一句话清楚的描述这次提交做了什么），不超过50个字符 4) body - 补充 subject 添加详细说明，可以分成多行，适当增加原因、目的等相关因素，也可不写 5 ) footer - 当有非兼容修改(Breaking Change)时必须在这里描述清楚 - 关闭issue或是链接到相关文档，如 Closes #1, Closes #2, #3 摘录自： 如何写好 commit message 更优雅的使用Git"},{"title":"使用人工智能ChatGPT写检讨","path":"/posts/56449/","content":"最近，我有好多次疫情填报没有填，辅导员给我打了电话，说我违反了学校的规定，需要写检讨。我就想到了最近比较流行的人工智能 ChatGPT ，我想试试能不能用AI帮我写检讨。虽然AI写的检讨废话连篇，但是辅导员看了后没有提出质疑。因此，某种程度上来说，ChatGPT通过了图灵测试。其实一开始，它不肯帮我写，但禁不住我的一步步诱导，它写下了这篇检讨。细节我就不说了，我把成果放在这里。 我是马鹏飞，因为没有进行疫情填报，现在需要进行检讨。我遗漏填报的次数超过了五次，违反了学校的管理规定。为了更好地规范自己的行为，我决定进行检讨，以确保不再遗漏填报，不再给学院的管理带来麻烦。在检讨的过程中，我发现自己在疫情填报方面存在以下问题：没有建立定时填报疫情的习惯，导致常常忘记填报疫情。没有定时检查疫情填报情况，即使漏填也不能及时发现。没有主动了解疫情填报的相关规定，不够重视疫情填报。为了解决这些问题，我想到了以下改进措施：提高自我约束能力，建立自律的填报习惯。定时检查疫情填报情况，及时发现并补填遗漏的疫情填报。了解学院关于疫情填报的处罚规定，更好地了解疫情填报的重要性，重视疫情填报。通过这些改进措施，我希望能够更好地履行疫情填报义务，避免再次违反学校管理规定。"},{"title":"增加相册页面","path":"/posts/55449/","content":"我想做一个相册，但是我不知道什么样的相册比较美观，于是参考了一些论坛和博客。首先是Discourse的一款插件Tiles Image Gallery，然后是Volantis的gallery标签，频率的博客以及瀑布流的教程，RongJ的博客，最后我决定结合使用下面这两款插件： Justified Gallery Fancybox 效果如下图所示，也可以点击这里查看本站的示例。 注意：stellar主题默认给图片增加了圆角的效果，这里我给他去除了。 &lt;style&gt;.md-text img &#123; border-radius:0px&#125;&lt;/style&gt; 代码 Hexo文档中插入下面这段示例代码即可显示上述效果。 &#123;% gallery %&#125;![3721669695359_.pic](path/22211291216879.jpg)![3711669695359_.pic](path/02211291217546.jpg)&#123;% endgallery %&#125; JS代码分为两部分，第一部分将Markdown语法组装成HTML代码，第二部分在用户端调用Fancybox和Justified Gallery渲染页面。第二部分代码在main.js文件末尾。 gallery.js main.js 待改进的地方 目前不足之处： 未使用略缩图，CDN有这一项服务 图片加载失败时没有错误处理 不能直接从GitHub仓库的文件夹加载相册 和stellar的tabs标签不兼容 没有加入微调参数 参数 Justified Gallery的参数挺多的，行高，最大行数，末尾行是否填满，图片之间的间隙，是否有标题等等。 欢迎提出建议"},{"title":"在博客中插入音乐","path":"/posts/63539/","content":"前言 Hexo 是一个快速、简洁且高效的博客框架，他能帮助我们生成静态网站，部署在云服务器或者云空间中。我希望静态网站的体积尽可能小，生成速度尽可能快，以便我们能够以最经济，最快捷的方式部署网站，因此不希望静态网站中包含图片、音频、视频等媒体文件，这些文件会以链接的形式出现在HTML文档中。如果是私有资源，那么我会将这些媒体文件存放在成本更低、管理更方便的云存储中，并辅之以CDN，使用户获得最快的访问速度。如果是公有资源，那么我们可以通过在浏览器上运行Javascript脚本，在用户浏览网站时临时获取这些媒体文件，更加节省了自己的存储、带宽资源。 Hexo插件 如果网站只包含HTML、CSS、JS三种类型的文件，怎样才能加入播放音乐的功能呢？首先，音乐的海报、音频、歌词等资源文件的链接要写入HTML中。如果有相应的hexo插件，那么在写文档时，加入一些标记，例如musicplayer标记，Hexo会将这段文本交给musicplayer插件处理，通过正则匹配识别出资源文件的链接。 &#123;% musicplayer from:local id:aplayer4 %&#125;&lt;!-- song --&gt;url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.lrc&#x27; name=&#x27;我记得&#x27; artist=&#x27;赵雷&#x27;&lt;!-- song --&gt;url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.lrc&#x27; name=&#x27;留下来陪你生活&#x27; artist=&#x27;张悬&#x27;&#123;% endmusicplayer %&#125; 识别以后，hexo插件会将这些链接组装成HTML格式的文本，至此静态网页生成完毕。 &lt;div class=&quot;stellar-musicplayer&quot; id=&quot;aplayer3&quot; from=&#x27;local&#x27;&gt;&lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927771.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927771.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927771.lrc&#x27; name=&#x27;喜欢&#x27; artist=&#x27;张悬&#x27; &gt;&lt;/div&gt;&lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/29818028.mp3&#x27; cover=&#x27;http://qiniu.pengfeima.cn/typora/202212062310206.jpg&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/29818028.lrc&#x27; name=&#x27;Rainy Mood&#x27; artist=&#x27;www.rainymood.com&#x27; &gt;&lt;/div&gt;&lt;/div&gt; 在用户浏览器上，JS脚本会在HTML文本中找到stellar-musicplayer这一元素，然后解析里面的数据，构建出一个音乐播放器。音乐播放器有现成的代码，本文采用了aplayer播放器。 音乐资源 本地资源 本地音乐资源需要先上传到云存储服务器上，获取资源文件的外链，最后插入文档中。资源文件可以从网易云音乐下载，脚本如下： 下载网易云音乐资源到本地# 网易云爬虫，使用了NeteaseCloudMusicApi，文档参见：# https://neteasecloudmusicapi.vercel.appimport requestsfrom loguru import loggerlogger.add(&#x27;my_log.log&#x27;)url_base = &quot;https://netease.user.cn&quot;class NeteaseAPI(): def song_lyric(self, id = &#x27;436147423&#x27;): url = url_base + &quot;/lyric&quot; params = &#123; &#x27;id&#x27;:id &#125; response = requests.get(url,params=params) logger.info(&quot;response.url: &#123;&#125;&quot;.format(response.url)) return response def song_detail(self, id = &#x27;436147423&#x27;): url = url_base + &quot;/song/detail&quot; params = &#123; &#x27;ids&#x27;:id &#125; response = requests.get(url,params=params) logger.info(&quot;response.url: &#123;&#125;&quot;.format(response.url)) return response def song(self, id = &#x27;436147423&#x27;, level = &#x27;standard&#x27;): # url = url_base + &quot;/song/url&quot; # old API url = url_base + &quot;/song/url/v1&quot; params = &#123; &#x27;id&#x27; : id, &#x27;level&#x27; : level # standard =&gt; 标准 # higher =&gt; 较高 # exhigh =&gt; 极高 # lossless =&gt; 无损 # hires =&gt; Hi-Res &#125; response = requests.get(url,params=params) logger.info(&quot;response.url: &#123;&#125;&quot;.format(response.url)) return response def song_download(self, id = &#x27;1834270728&#x27;, level = &#x27;standard&#x27;, filename = &quot;filename&quot;): result = self.song(id=id,level=level) url_song = result.json()[&#x27;data&#x27;][0][&#x27;url&#x27;] logger.info(&quot;url_song: &#123;&#125;&quot;.format(url_song)) logger.info(&quot;song_path: &#123;&#125;&quot;.format(filename)) # 判断歌曲是否能下载 if url_song == None : appendix = &quot;.txt&quot; with open(filename + appendix, &#x27;wb&#x27;) as f: f.write(filename.encode()) else : appendix = &#x27;.&#x27; + url_song.split(&quot;.&quot;)[-1] response = requests.get(url_song) # 文件名外部传入，后缀从url解析 with open(filename + appendix, &#x27;wb&#x27;) as f: f.write(response.content) logger.info(&quot;response.url: &#123;&#125;&quot;.format(response.url)) return filename + appendix# test NA = NeteaseAPI()id=&quot;453927771&quot;# 获取歌曲详细信息result = NA.song_detail(id=id)song_name = result.json()[&#x27;songs&#x27;][0][&#x27;name&#x27;]singer_name = result.json()[&#x27;songs&#x27;][0][&#x27;ar&#x27;][0][&#x27;name&#x27;]with open(&quot;-&quot;.join([id,song_name,singer_name])+&#x27;.txt&#x27;, &#x27;wb&#x27;) as f: f.write(result.content)# 获取歌曲封面response = requests.get(result.json()[&#x27;songs&#x27;][0][&#x27;al&#x27;][&#x27;picUrl&#x27;])with open(id+&#x27;.png&#x27;, &#x27;wb&#x27;) as f: f.write(response.content)# 获取歌词result = NA.song_lyric(id=id)with open(id+&#x27;.lrc&#x27;, &#x27;w&#x27;) as f: f.write(result.json()[&#x27;lrc&#x27;][&#x27;lyric&#x27;])# 获取歌曲音频result = NA.song_download(id=id,filename=id)# 返回我们需要的格式url_base = &quot;https://raw.githubusercontent.com/user/images-1/main/music/&quot;print(&quot;audio=\\&#x27;&quot;+url_base+id+&quot;.mp3\\&#x27;,&quot;)print(&quot;cover=\\&#x27;&quot;+url_base+id+&quot;.png\\&#x27;,&quot;)print(&quot;lrc=\\&#x27;&quot;+url_base+id+&quot;.lrc\\&#x27;,&quot;)print(&quot;name=\\&#x27;&quot;+song_name+&#x27;\\&#x27;,&#x27;)print(&quot;artist=\\&#x27;&quot;+singer_name+&#x27;\\&#x27;,&#x27;) 云端资源 云端资源可以在用户浏览网页从音乐服务商处临时获取，例如网易云音乐，JS脚本如下： 在浏览器中获取网易云音乐资源// 要确保已经引入了https://unpkg.com/flyio/dist/umd/fly.umd.min.js文件var fly=new Fly();url_base = &quot;https://netease.user.cn&quot;const NeteaseMusicAPI = &#123; download_lyric: async(id) =&gt; &#123; console.log(&#x27;Downloading lyric...&#x27;, id) url = url_base + &quot;/lyric&quot; params = &#123; &#x27;id&#x27;:id &#125; // 成功的回调函数 function download_lyric_success(result) &#123; console.log(&quot;Downloaded successfully.&quot;); return result; &#125; // 失败的回调函数 function download_lyric_fail(error) &#123; console.log(&quot;Failed to download.&quot; + error); &#125; let result = fly.request(url, params).then(download_lyric_success,download_lyric_fail); let data = await result.then((result) =&gt; &#123;return result[&#x27;data&#x27;][&#x27;lrc&#x27;][&#x27;lyric&#x27;]&#125;); return data; &#125;, download_song_detail: async(id) =&gt; &#123; url = url_base + &quot;/song/detail&quot; params = &#123; &#x27;ids&#x27;:id &#125; let result = fly.request(url, params).then( (result) =&gt; &#123; console.log(&quot;Downloaded successfully.&quot;); console.log(result[&#x27;data&#x27;][&#x27;songs&#x27;][0][&#x27;name&#x27;]); console.log(result[&#x27;data&#x27;][&#x27;songs&#x27;][0][&#x27;ar&#x27;][0][&#x27;name&#x27;]); console.log(result[&#x27;data&#x27;][&#x27;songs&#x27;][0][&#x27;al&#x27;][&#x27;picUrl&#x27;]); var details = &#123;&#125;; details[&#x27;name&#x27;] = result[&#x27;data&#x27;][&#x27;songs&#x27;][0][&#x27;name&#x27;]; details[&#x27;singer&#x27;] = result[&#x27;data&#x27;][&#x27;songs&#x27;][0][&#x27;ar&#x27;][0][&#x27;name&#x27;]; details[&#x27;pic&#x27;] = result[&#x27;data&#x27;][&#x27;songs&#x27;][0][&#x27;al&#x27;][&#x27;picUrl&#x27;]; return details; &#125;, (error) =&gt; &#123; console.log(&quot;Failed to download. The error is : &quot; + error); return result; &#125;); return result; &#125;, download_song_url: (id, level = &#x27;standard&#x27;) =&gt; &#123; url = url_base + &quot;/song/url/v1&quot; params = &#123; &#x27;id&#x27; : id, &#x27;level&#x27; : level &#125; let result = fly.request(url, params).then( (result) =&gt; &#123; console.log(&quot;Downloaded successfully.&quot;); url = result[&#x27;data&#x27;][&#x27;data&#x27;][0][&#x27;url&#x27;]; // 删除 https:// 或者 http:// url = url.replace(/^(http|https):/, &#x27;&#x27;); console.log(url); return url; &#125;, (error) =&gt; &#123; console.log(&quot;Failed to download. The error is : &quot; + error); return result; &#125;); return result; &#125;, layoutDiv: (cfg) =&gt; &#123; const el = $(cfg.el)[0]; var id = cfg.song_id; var lyric = NeteaseMusicAPI.download_lyric(id); var detail = NeteaseMusicAPI.download_song_detail(id); var url = NeteaseMusicAPI.download_song_url(id); url.then((song_url)=&gt;&#123; var cell = &#x27;&lt;audio src=\\&quot;&#x27; + song_url + &#x27;\\&quot; controls&gt;&lt;/audio&gt;&#x27;+&#x27;&lt;br&gt;&#x27;; $(el).append(cell); &#125;); detail.then((details)=&gt;&#123; var cell = &#x27;歌名&#x27;+details[&#x27;name&#x27;]+&#x27;&lt;br&gt;&#x27;+&#x27;&lt;br&gt;&#x27;; cell += &#x27;歌手&#x27;+details[&#x27;singer&#x27;]+&#x27;&lt;br&gt;&#x27;+&#x27;&lt;br&gt;&#x27;; cell += &#x27;&lt;img src=\\&quot;&#x27; + details[&#x27;pic&#x27;] + &#x27;\\&quot;&gt;&lt;/img&gt;&#x27;+&#x27;&lt;br&gt;&#x27;+&#x27;&lt;br&gt;&#x27;+&#x27;&lt;br&gt;&#x27;; $(el).append(cell); &#125;); lyric.then((lyric)=&gt;&#123; var cell = lyric+&#x27;&lt;br&gt;&#x27;+&#x27;&lt;br&gt;&#x27;; $(el).append(cell); &#125;); &#125;,&#125;// DOM 的解析// &lt;div class=&#x27;netease-music-player&#x27; song_id=&#x27;436147423&#x27;&gt;// &lt;div class=&#x27;netease-music-player&#x27;&gt;// &lt;div song_id=&#x27;436147423&#x27;&gt;&lt;/div&gt;// &lt;div song_id=&#x27;436147423&#x27;&gt;&lt;/div&gt;// &lt;/div&gt;$(function () &#123; const els = document.getElementsByClassName(&#x27;netease-music-player&#x27;); console.log(&quot;netease-music-player&quot;); console.log(&quot;els.length&quot;,els.length); for (var i = 0; i &lt; els.length; i++) &#123; console.log(&quot;netease-music-player&quot;); const el = els[i]; const song_id = el.getAttribute(&#x27;song_id&#x27;); if (song_id == null) &#123; continue; &#125; var cfg = new Object(); cfg.el = el; cfg.song_id = song_id; NeteaseMusicAPI.layoutDiv(cfg); &#125;&#125;); 示例 以下给出四个例子，音乐播放器可以通过hexo标签放置，也可以通过HTML代码放置，两者等价。 网易云音乐 只需插入网易云音乐编号，会自动获取音频等资源的链接。 HTML 方式&lt;div class=&quot;stellar-musicplayer&quot; id=&quot;aplayer1&quot; from=&#x27;netease&#x27; song_id=&#x27;436147423,1309394503,26590191&#x27;&gt;&lt;/div&gt;效果hexo 插件的方式&#123;% musicplayer from:netease id:aplayer2 song_id:436147423,1309394503,26590191 %&#125;&#123;% endmusicplayer %&#125;效果 云存储 HTML 方式&lt;div class=&quot;stellar-musicplayer&quot; id=&quot;aplayer3&quot; from=&#x27;local&#x27;&gt;&lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927771.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927771.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927771.lrc&#x27; name=&#x27;喜欢&#x27; artist=&#x27;张悬&#x27; &gt;&lt;/div&gt;&lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/29818028.mp3&#x27; cover=&#x27;http://qiniu.pengfeima.cn/typora/202212062310206.jpg&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/29818028.lrc&#x27; name=&#x27;Rainy Mood&#x27; artist=&#x27;www.rainymood.com&#x27; &gt;&lt;/div&gt;&lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1309394503.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1309394503.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1309394503.lrc&#x27; name=&#x27;The White Lady&#x27; artist=&#x27;Christopher Larkin&#x27; &gt;&lt;/div&gt; &lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.lrc&#x27; name=&#x27;我记得&#x27; artist=&#x27;赵雷&#x27; &gt;&lt;/div&gt;&lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927794.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927794.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/453927794.lrc&#x27; name=&#x27;如何&#x27; artist=&#x27;张悬&#x27; &gt;&lt;/div&gt;&lt;div url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.lrc&#x27; name=&#x27;留下来陪你生活&#x27; artist=&#x27;张悬&#x27; &gt;&lt;/div&gt;&lt;/div&gt;效果 hexo 插件的方式&#123;% musicplayer from:local id:aplayer4 %&#125;&lt;!-- song --&gt;url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/1974443814.lrc&#x27; name=&#x27;我记得&#x27; artist=&#x27;赵雷&#x27;&lt;!-- song --&gt;url=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.mp3&#x27; cover=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.png&#x27; lrc=&#x27;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/music/26590191.lrc&#x27; name=&#x27;留下来陪你生活&#x27; artist=&#x27;张悬&#x27;&#123;% endmusicplayer %&#125;效果 MetingJs 参考:https://github.com/MoePlayer/hexo-tag-aplayer 如果想要自己写一个hexo插件，我们需要知道Promise的用法，异步计算，会搭建网易云音乐的第三方API服务器。一些参考资料： 文档对象模型(Document_Object_Model, DOM) 使用Promise async 函数","tags":["音乐播放器"]},{"title":"过年了放烟花啦","path":"/posts/12076/","content":"非常棒的烟花模拟器！稍等片刻，烟花盛宴马上开始，将会有十一种烟花照亮天空！ 源码来自Firework_Simulator ，原作者为 XgpNwb，你也可以全屏观看。"},{"title":"浸没边界有限元方法的无条件能量稳定格式","path":"/posts/47559/","content":"简介： 大概就是这样：给出一种数值格式，证明它无条件能量稳定，然后再设计求解算法，最后实现CPU-GPU异构并行。 大概就是这样：给出一种数值格式，证明它无条件能量稳定，然后再设计求解算法，最后实现CPU-GPU异构并行。 We will show stability for a wide class of spatial discretizations but only for two types of temporal discretizations. We analyze unsteady Stokes flow because as mentioned above, the advection terms of the Navier–Stokes equations are not the cause of instability in these methods. We will, however, include the advection terms in some computational tests in Section 5. 我们这样做是因为时间离散化的选择似乎比空间离散化对稳定性更重要——我们将显示出广泛的空间离散化类别的稳定性，但仅适用于两种类型的时间离散化。我们分析非定常斯托克斯流，因为如上所述，Navier-Stokes方程的平流项不是这些方法中不稳定的原因。然而，我们将在第5节的一些计算测试中包括平流项。 时间离散 不管是经典的浸没边界法，还是它的拓展模型，在数值格式的稳定性方面，时间离散格式都比空间离散格式更重要。本文所讨论的模型也不例外。因此，我们首先将连续运动方程按时间变量进行离散，得到一个空间连续、时间离散的系统。公式 (1-5) 是本文使用的时间离散格式，它的特点是固体位移方程 (5) 采用了隐式离散。此外，插值算子和延拓算子中的固体位移变量采用了显式离散，由此产生的迟滞效应并不会影响数值格式的稳定性。 \\begin{equation} \\rho\\left(\\frac{\\mathbf{u}_{n+1}-{\\mathbf{u}_{n}}}{\\Delta t}+{\\color{red}\\mathbf{u}_{n}} \\cdot abla \\mathbf{u}_{n+1}\\right)-\\mu \\Delta \\mathbf{u}_{n+1}+ abla p_{n+1} = \\mathbf{f}_{n+1}, \\end{equation} \\begin{equation} abla \\cdot \\mathbf{u}_{n+1} =0, \\end{equation} \\begin{equation} \\int_{B_{r}} \\mathbf{F}_{n+1} \\cdot \\mathbf{V} \\mathrm d \\mathbf{x} =-\\int_{B_{r}} \\mathbb{P}_{n+1}: abla \\mathbf{V} \\mathrm d \\mathbf{X}, \\end{equation} \\begin{equation} \\mathbf{f}\\left(\\mathbf{x}, t_{n+1}\\right) =\\int_{B_r} \\mathbf{F}\\left(\\mathcal{X}_{n+1}\\right) \\delta\\left(\\mathbf{x}-{\\color{red}\\mathcal{X}_{n}}\\right) \\mathrm d \\mathbf{X} , \\end{equation} \\begin{equation} \\frac{\\mathcal{X}\\left(\\mathbf{X}, t_{n+1}\\right) - \\mathcal{X}\\left(\\mathbf{X}, t_{n}\\right)}{\\Delta t} = \\int_{\\Omega} {\\color{red}\\mathbf{u}\\left(\\mathbf{x}, t_{n+1}\\right)} \\delta\\left(\\mathbf{x}-{\\color{red}\\mathcal{X}_{n}}\\right) \\mathrm d \\mathbf{x}. \\end{equation} 半离散格式的无条件能量稳定证明 我们将为流固耦合系统定义一个适当的能量函数，并证明在满足某些条件的情况下，它是一个关于时间非增的函数，因此也是一个有界函数。这就证明了数值格式 (1-5) 是无条件稳定的。 令(v,w)Ω=∫Ωv⋅w dx(\\mathbf{v},\\mathbf{w})_{\\Omega}=\\int_{\\Omega}\\mathbf{v}\\cdot\\mathbf{w}\\;\\mathrm{d}\\mathbf{x}(v,w)Ω​=∫Ω​v⋅wdx表示L2(Ω)L^2(\\Omega)L2(Ω)的内积，∥⋅∥L2(Ω)\\|\\cdot\\|_{L^2(\\Omega)}∥⋅∥L2(Ω)​表示L2(Ω)L^2(\\Omega)L2(Ω)的范数，ρ2∥u∥L2(Ω)2\\frac{\\rho}{2}\\|\\mathbf{u}\\|_{L^2(\\Omega)}^22ρ​∥u∥L2(Ω)2​为流固耦合系统的总动能。令(V,W)Br=∫BrV⋅W dX(\\mathbf{V},\\mathbf{W})_{B_r}=\\int_{B_r}\\mathbf{V}\\cdot\\mathbf{W}\\;\\mathrm{d}\\mathbf{X}(V,W)Br​​=∫Br​​V⋅WdX表示L2(Br)L^2(B_r)L2(Br​)的内积，E(X)=∫BrW(X) dXE(\\mathcal{X})=\\int_{B_r}W(\\mathcal{X})\\;\\mathrm{d}\\mathbf{X}E(X)=∫Br​​W(X)dX表示固体的弹性势能。流固耦合系统的总能量是流固耦合系统的总动能和固体的弹性势能之和，是一个关于u\\mathbf{u}u和X\\mathcal{X}X的函数，可以表示成 R(u,X)=ρ2∥u∥L2(Ω)2+E(X)R(\\mathbf{u},\\mathcal{X})=\\frac{\\rho}{2}\\|\\mathbf{u}\\|_{L^2(\\Omega)}^2+E(\\mathcal{X}) R(u,X)=2ρ​∥u∥L2(Ω)2​+E(X) 将等式(1)和 un+1\\mathbf{u}_{n+1}un+1​ 在 Ω\\OmegaΩ 上做内积，~~将等式(2)和 pn+1\\mathbf{p}_{n+1}pn+1​ 在 Ω\\OmegaΩ 上做内积（这一条好像没有必要），~~将 V=1Δt(Xn+1−Xn)\\mathbf{V} = \\frac{1}{\\Delta t}(\\mathcal{X}_{n+1}-\\mathcal{X}_{n})V=Δt1​(Xn+1​−Xn​) 代入等式(3)，将等式(4)和 un+1\\mathbf{u}_{n+1}un+1​ 在 Ω\\OmegaΩ 上做内积，将等式(5)和 −Fn+1-\\mathbf{F}_{n+1}−Fn+1​ 在 BrB_rBr​ 上做内积，我们可以得到方程组(7-11)。 \\begin{equation} \\begin{aligned} \\frac{\\rho}{\\Delta t}\\left(\\mathbf{u}_{n+1}-\\mathbf{u}_n,\\mathbf{u}_{n+1}\\right)_{\\Omega}&amp;+\\left(\\mathbf{u}_n\\cdot abla\\mathbf{u}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega} -\\mu\\left(\\Delta\\mathbf{u}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega}\\\\ &amp;-\\left( abla p_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega}=\\left(\\mathbf{f}_{n+1}\\cdot\\mathbf{u}_{n+1}\\right)_{\\Omega} \\end{aligned} \\end{equation} \\begin{equation} \\left(p_{n+1}, abla\\cdot\\mathbf{u}_{n+1}\\right)=0 \\end{equation} \\begin{equation} \\frac{1}{\\Delta t}\\left(\\mathbf{F}_{n+1},\\mathcal{X}_{n+1}-\\mathcal{X}_{n}\\right)_{B_r}=-\\frac{1}{\\Delta t}(\\mathbb{P}_{n+1}, abla(\\mathcal{X}_{n+1}-\\mathcal{X}_{n}))_{B_r} \\end{equation} \\begin{equation} \\left(\\mathbf{f}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega}=\\int_{\\Omega}\\int_{B_r}\\mathbf{F}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{X}\\cdot\\mathbf{u}_{n+1}\\;\\mathrm{d}\\mathbf{x} \\end{equation} \\begin{equation} -\\frac{1}{\\Delta t}\\left((\\mathcal{X}_{n+1}-\\mathcal{X}_{n}),\\mathbf{F}_{n+1}\\right)_{B_r}=-\\int_{B_r}\\int_\\Omega\\mathbf{u}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{x}\\cdot\\mathbf{F}_{n+1}\\;\\mathrm{d}\\mathbf{X} \\end{equation} 不失一般性，我们假设速度满足边界条件u∣∂Ω=0\\mathbf{u}|_{\\partial \\Omega}=0u∣∂Ω​=0或∂u∂n∣∂Ω=0\\frac{\\partial\\mathbf{u}}{\\partial \\mathbf{n}}|_{\\partial\\Omega}=0∂n∂u​∣∂Ω​=0，根据无散度条件∇⋅un+1=0 abla\\cdot\\mathbf{u}_{n+1}=0∇⋅un+1​=0，我们可以得出 (un⋅∇un+1,un+1)Ω=0\\left(\\mathbf{u}_n\\cdot abla\\mathbf{u}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega}=0(un​⋅∇un+1​,un+1​)Ω​=0，且(∇pn+1,un+1)Ω=0\\left( abla p_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega}=0(∇pn+1​,un+1​)Ω​=0。此外，我们假设应变能函数以下条件： 令H\\mathbb{H}H为对 WWW 二阶求导得到的四阶张量： Hαiβj:=∂2W∂Fαi∂Fβj. \\mathbb{H}_{\\alpha i \\beta j}:=\\frac{\\partial^2 W}{\\partial \\mathbb{F}_{\\alpha i} \\partial \\mathbb{F}_{\\beta j}} \\text {. } Hαiβj​:=∂Fαi​∂Fβj​∂2W​. 假设存在κmin⁡,κmax⁡&gt;0\\kappa_{\\min },\\kappa_{\\max }&gt;0κmin​,κmax​&gt;0使得 κmin⁡E2⩽E:H:E⩽κmax⁡E2 \\kappa_{\\min } \\mathbb{E}^2 \\leqslant \\mathbb{E}: \\mathbb{H}: \\mathbb{E} \\leqslant \\kappa_{\\max } \\mathbb{E}^2 κmin​E2⩽E:H:E⩽κmax​E2 对任意二阶张量E\\mathbb{E}E成立。其中， E2=E:E,E:H:E=EαiHαiβjEβj\\mathbb{E}^2=\\mathbb{E}: \\mathbb{E}, \\quad \\mathbb{E}: \\mathbb{H}: \\mathbb{E}=\\mathbb{E}_{\\alpha i} \\mathbb{H}_{\\alpha i \\beta j} \\mathbb{E}_{\\beta j}E2=E:E,E:H:E=Eαi​Hαiβj​Eβj​。 对于不可压缩材料，这是一个合理的假设，据此可以得出 1Δt(E(Xn+1)−E(Xn))≤(P(Fn+1),Fn+1−FnΔt)B\\frac{1}{\\Delta t}\\left(E\\left(\\mathcal{X}^{n+1}\\right)-E\\left(\\mathcal{X}^n\\right)\\right)\\le\\left(\\mathbb{P}\\left(\\mathbb{F}^{n+1}\\right), \\frac{\\mathbb{F}^{n+1}-\\mathbb{F}^n}{\\Delta t}\\right)_{\\mathcal{B}} Δt1​(E(Xn+1)−E(Xn))≤(P(Fn+1),ΔtFn+1−Fn​)B​ 对于等式(7)中的第一项，我们可以进行如下推导： \\begin{equation} (\\mathbf{u}_{n+1}-\\mathbf{u}_n,\\mathbf{u}_{n+1})=\\frac{1}{2}\\|\\mathbf{u}_{n+1}-\\mathbf{u}_n\\|_{\\Omega}^2+\\frac{1}{2}(\\|\\mathbf{u}_{n+1}\\|_{\\Omega}^2-\\|\\mathbf{u}_{n}\\|_{\\Omega}^2) \\end{equation} 而对于等式(10)和(11)中插值算子和延拓算子，我们可以通过交换积分顺序得到等式(16) \\begin{equation} \\int_{\\Omega}\\int_{B_r}\\mathbf{F}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{X}\\cdot\\mathbf{u}_{n+1}\\;\\mathrm{d}\\mathbf{x} = \\int_{B_r}\\int_\\Omega\\mathbf{u}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{x}\\cdot\\mathbf{F}_{n+1}\\;\\mathrm{d}\\mathbf{X} \\end{equation} 最后，将(15)代入(7)，将(16)代入(10)，再将(7)(9)(10)(11)式相加，可以得到等式 \\begin{equation} \\frac{\\rho}{2\\Delta t}\\left(\\|\\mathbf{u}_{n+1}\\|^2-\\|\\mathbf{u}_{n}\\|^2\\right)+\\frac{1}{\\Delta t}\\left(E(\\mathcal{X}^{n+1})-E(\\mathcal{X}^n)\\right)=\\mu\\left(\\Delta\\mathbf{u}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega}-\\frac{\\rho}{2\\Delta t}(\\|\\mathbf{u}_{n+1}\\|_{\\Omega}^2-\\|\\mathbf{u}_{n}\\|_{\\Omega}^2) \\end{equation} 因此方程组(1-5)求解出来的u\\mathbf{u}u和X\\mathcal{X}X满足不等式 R(u,X)n+1−R(u,X)n≤0R(\\mathbf{u},\\mathcal{X})_{n+1}-R(\\mathbf{u},\\mathcal{X})_{n}\\le0 R(u,X)n+1​−R(u,X)n​≤0 因此半离散格式的无条件能量稳定的。在un+1\\mathbf{u}_{n+1}un+1​和Xn+1\\mathcal{X}_{n+1}Xn+1​可解的前提下，取任意大的时间步长，系统都是稳定的。 全离散 全离散格式的证明是类似的，但是这里有个问题我纠结了很久。如果速度和压强整体求解(un+1,pn+1)(\\mathbf{u}_{n+1},p_{n+1})(un+1​,pn+1​)，那么全离散格式仍是无条件能量稳定的，但是计算效率并不高。如果采用投影方法，先求一个中间速度u∗\\mathbf{u}_*u∗​，再求解压强pn+1p_{n+1}pn+1​，最后求解速度un+1\\mathbf{u}_{n+1}un+1​，求解效率固然高，但是对流项只能采用un⋅∇u∗\\mathbf{u}_n\\cdot abla\\mathbf{u}_*un​⋅∇u∗​，不能采用un⋅∇un+1\\mathbf{u}_n\\cdot abla\\mathbf{u}_{n+1}un​⋅∇un+1​，因此证明不了全离散格式的无条件稳定。 在浸没边界法中，对流项是影响稳定性的次要因素，Newren论文中是这样说的：因为对流项对稳定性影响不大，我们只考虑没有对流项的Stokes方程。Boffi的论文中是这样说的：假设我们能精确估计出对流项un⋅∇un+1\\mathbf{u}_n\\cdot abla\\mathbf{u}_{n+1}un​⋅∇un+1​。 我这里的证明暂时先不考虑对流项，离散格式如下： \\begin{equation} \\frac{\\rho}{\\Delta t}\\left(\\mathbf{u}_{*}-{\\mathbf{u}_{n}}\\right)-\\mu \\Delta_h \\mathbf{u}_{*} = \\mathbf{f}_{n+1}, \\end{equation} \\begin{equation} \\Delta^h p_{n+1}=\\frac{1}{\\Delta t} abla^h \\cdot \\mathbf{u}^* \\end{equation} \\begin{equation} \\mathbf{u}^{n+1}=\\mathbf{u}^*-\\Delta t abla^h p_{n+1} \\end{equation} \\begin{equation} \\int_{B_{h}} \\mathbf{F}_{h,n+1} \\cdot \\mathbf{V}_h \\mathrm d \\mathbf{x} =\\int_{B_h} \\mathbb{P}_{h,n+1}: abla \\mathbf{V}_h \\mathrm d \\mathbf{X}, \\end{equation} \\begin{equation} \\mathbf{f}\\left(\\mathbf{x}, t_{n+1}\\right) =\\int_{B_r} \\mathbf{F}_{h,n+1} \\delta\\left(\\mathbf{x}-{\\color{red}\\mathcal{X}_{h,n}}\\right) \\mathrm d \\mathbf{X} , \\end{equation} \\begin{equation} \\frac{\\mathcal{X}_{h,n+1} - \\mathcal{X}_{h,n}}{\\Delta t} = \\int_{\\Omega} {\\color{red}\\mathbf{u}_{n+1}} \\delta\\left(\\mathbf{x}-{\\color{red}\\mathcal{X}_{h,n}}\\right) \\mathrm d \\mathbf{x}. \\end{equation} 内积形式 空间离散后，内积需要重新定义：(v,w)Ωh=∑ijvij⋅wijΔxΔy(\\mathbf{v},\\mathbf{w})_{\\Omega_h}=\\sum_{i j} \\mathbf{v}_{i j} \\cdot \\mathbf{w}_{i j} \\Delta x \\Delta y(v,w)Ωh​​=∑ij​vij​⋅wij​ΔxΔy。 参考构型上的内积差别不大：(V,W)Bh=∫BhV⋅Wdx(\\mathbf{V},\\mathbf{W})_{B_h}=\\int_{B_h}\\mathbf{V}\\cdot\\mathbf{W}\\mathrm{d}\\mathbf{x}(V,W)Bh​​=∫Bh​​V⋅Wdx。 将等式(17)和 un+1\\mathbf{u}_{n+1}un+1​ 在 Ωh\\Omega_hΩh​ 上做内积 将等式(19)和 un+1\\mathbf{u}_{n+1}un+1​ 在 Ωh\\Omega_hΩh​ 上做内积 将 Vh=1Δt(Xh,n+1−Xh,n)\\mathbf{V}_h = \\frac{1}{\\Delta t}(\\mathcal{X}_{h,n+1}-\\mathcal{X}_{h,n})Vh​=Δt1​(Xh,n+1​−Xh,n​) 代入等式(3) 将等式(4)和 un+1\\mathbf{u}_{n+1}un+1​ 在 Ωh\\Omega_hΩh​ 上做内积 将等式(5)和 −Fh,n+1-\\mathbf{F}_{h,n+1}−Fh,n+1​ 在 BhB_hBh​ 上做内积 \\begin{equation} \\begin{aligned} \\frac{\\rho}{\\Delta t}\\left(\\mathbf{u}_{*}-\\mathbf{u}_n,\\mathbf{u}_{n+1}\\right)_{\\Omega_h} -\\mu\\left(\\Delta\\mathbf{u}_{*},\\mathbf{u}_{n+1}\\right)_{\\Omega_h}=\\left(\\mathbf{f}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega_h} \\end{aligned} \\end{equation} \\begin{equation} \\left(\\mathbf{u}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega_h}=(\\mathbf{u}_*-\\Delta t abla^h p_{n+1},\\mathbf{u}_{n+1})_{\\Omega_h} \\end{equation} \\begin{equation} \\frac{1}{\\Delta t}\\left(\\mathbf{F}_{h,n+1},\\mathcal{X}_{h,n+1}-\\mathcal{X}_{h,n}\\right)_{B_h}=(\\mathbb{P}_{h,n+1}, abla(\\mathcal{X}_{h,n+1}-\\mathcal{X}_{h,n}))_{B_h} \\end{equation} \\begin{equation} \\left(\\mathbf{f}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega_h}=\\left(\\int_{B_r}\\mathbf{F}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{X},\\mathbf{u}_{n+1}\\right)_{\\Omega_h} \\end{equation} \\begin{equation} -\\frac{1}{\\Delta t}\\left((\\mathcal{X}_{n+1}-\\mathcal{X}_{n}),\\mathbf{F}_{n+1}\\right)_{B_h}=\\left(\\int_\\Omega\\mathbf{u}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{x},\\mathbf{F}_{n+1}\\right)_{B_h} \\end{equation} 假设条件 离散算子∇h abla^h∇h和Δh\\Delta^hΔh满足可交换性。 适当的边界条件使得离散的无散度向量场与离散的梯度场的内积为零。(u,∇hp)Ωh=0\\left(\\mathbf{u}, abla^h p\\right)_{\\Omega_h}=0(u,∇hp)Ωh​​=0。 应变能函数满足前文所述假设。 插值算子和延拓算子满足（插值算子和延拓算子在空间离散后不一定满足对偶性） (∫BrFn+1δ(x−Xn) dX,un+1)Ωh≤(∫Ωun+1δ(x−Xn) dx,Fn+1)Bh\\left(\\int_{B_r}\\mathbf{F}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{X},\\mathbf{u}_{n+1}\\right)_{\\Omega_h}\\le\\left(\\int_\\Omega\\mathbf{u}_{n+1}\\delta(\\mathbf{x}-\\mathcal{X}_{n})\\;\\mathrm{d}\\mathbf{x},\\mathbf{F}_{n+1}\\right)_{B_h} (∫Br​​Fn+1​δ(x−Xn​)dX,un+1​)Ωh​​≤(∫Ω​un+1​δ(x−Xn​)dx,Fn+1​)Bh​​ 推导过程 将(19)代入(24)消去u∗\\mathbf{u}_*u∗​，其他和半离散格式类似。 因此前述全离散格式无条件稳定 \\begin{equation} \\frac{\\rho}{2\\Delta t}\\left(\\|\\mathbf{u}_{n+1}\\|^2-\\|\\mathbf{u}_{n}\\|^2\\right)+\\frac{1}{\\Delta t}\\left(E(\\mathcal{X}_{h,n+1})-E(\\mathcal{X}_{h,n})\\right)\\le\\mu\\left(\\Delta\\mathbf{u}_{n+1},\\mathbf{u}_{n+1}\\right)_{\\Omega_h} \\end{equation} 算法 引入离散的插值算子和延拓算子后，全离散格式可以写成 ρΔt(u∗−un)−μΔu∗=f∗Δhpn+1=1Δt∇h⋅u∗un+1=u∗−Δt∇hpn+1∫BrFn+1⋅Vdx=∫BrPn+1:∇VdX,f(x,tn+1)=Jh,n(Fn+1)U(X,tn+1)=Sh,n(un+1)\\begin{gathered} \\frac{\\rho}{\\Delta t}\\left({\\mathbf{u}_{*}-\\mathbf{u}_n}\\right)-\\mu \\Delta \\mathbf{u}_{*}=\\mathbf{f}_{*} \\\\ \\Delta^h p_{n+1}=\\frac{1}{\\Delta t} abla^h \\cdot \\mathbf{u}^*\\\\ \\mathbf{u}^{n+1}=\\mathbf{u}^*-\\Delta t abla^h p_{n+1} \\\\ \\int_{B_r} \\mathbf{F}_{n+1} \\cdot \\mathbf{V d} \\mathbf{x}=\\int_{B_r} \\mathbb{P}_{n+1}: abla \\mathbf{V d} \\mathbf{X}, \\\\ \\mathbf{f}\\left(\\mathbf{x}, t_{n+1}\\right)=\\mathcal{J}_{h, n}\\left(\\mathbf{F}_{n+1}\\right) \\\\ \\mathbf{U}\\left(\\mathbf{X}, \\mathbf{t}_{\\mathbf{n}+\\mathbf{1}}\\right)=\\mathcal{S}_{h, n}\\left(\\mathbf{u}_{n+1}\\right) \\end{gathered} Δtρ​(u∗​−un​)−μΔu∗​=f∗​Δhpn+1​=Δt1​∇h⋅u∗un+1=u∗−Δt∇hpn+1​∫Br​​Fn+1​⋅Vdx=∫Br​​Pn+1​:∇VdX,f(x,tn+1​)=Jh,n​(Fn+1​)U(X,tn+1​)=Sh,n​(un+1​)​ 引入函数 hn+1(Xh,n+1)=Xh,n+1−Xh,nΔt−Uh,n+1h_{n+1}\\left(\\mathcal{X}_{h,n+1}\\right)=\\frac{\\mathcal{X}_{h,n+1}-\\mathcal{X}_{h,n}}{\\Delta t}-\\mathbf{U}_{h,n+1} hn+1​(Xh,n+1​)=ΔtXh,n+1​−Xh,n​​−Uh,n+1​ 其中，Uh,n+1\\mathbf{U}_{h,n+1}Uh,n+1​为关于Xh,n+1\\mathcal{X}_{h,n+1}Xh,n+1​的非线形函数。为了简明符号，令X\\mathcal{X}X为Xh,n+1\\mathcal{X}_{h,n+1}Xh,n+1​的系数构成的向量，即 X={Xl(tn+1)}l=1M\\mathcal{X}=\\left\\{\\mathcal{X}_l(t_{n+1})\\right\\}_{l=1}^MX={Xl​(tn+1​)}l=1M​。我们采用迭代法求解方程(30)，即构造一组序列 $\\left{\\mathcal{X}_{n+1}^{(k)}\\right} $ 使得 ∥hn+1(Xn+1(k))∥\\left\\|h_{n+1}\\left(\\mathcal{X}_{n+1}^{(k)}\\right)\\right\\|∥∥∥∥​hn+1​(Xn+1(k)​)∥∥∥∥​趋于零。 牛顿方法 求解 hn+1(Xn+1)=0\\mathbf{h}_{n+1}\\left(\\mathcal{X}_{n+1}\\right)=0hn+1​(Xn+1​)=0 的 Newton 迭代公式为: h(Xn+1(k))+J(Xn+1(k))(Xn+1(k+1)−Xn+1(k))=0h\\left(\\mathcal{X}_{n+1}^{(k)}\\right)+J\\left(\\mathcal{X}_{n+1}^{(k)}\\right)\\left(\\mathcal{X}_{n+1}^{(k+1)}-\\mathcal{X}_{n+1}^{(k)}\\right)=0 h(Xn+1(k)​)+J(Xn+1(k)​)(Xn+1(k+1)​−Xn+1(k)​)=0 其中 J(Xn+1(k))J\\left(\\mathcal{X}_{n+1}^{(k)}\\right)J(Xn+1(k)​) 为 Jacobian 矩阵 J(Xn+1(k))=∂h(Xn+1(k))∂Xn+1J\\left(\\mathcal{X}_{n+1}^{(k)}\\right)=\\frac{\\partial h\\left(\\mathcal{X}_{n+1}^{(k)}\\right)}{\\partial \\mathcal{X}_{n+1}} J(Xn+1(k)​)=∂Xn+1​∂h(Xn+1(k)​)​ 但 J(Xn+1(k))J\\left(\\mathcal{X}_{n+1}^{(k)}\\right)J(Xn+1(k)​) 的解析表达式难以获得。 差分法求解Jacobian矩阵 Newren 采用差分法求解雅可比矩阵。 [J(Xn+1(k))]i,j\\left[J\\left(\\mathcal{X}_{n+1}^{(k)}\\right)\\right]_{i, j}[J(Xn+1(k)​)]i,j​ 表示雅可比矩阵的第 iii 行第 jjj 列元素, 它可以通过差分法得到 [J(Xn+1(k))]i,j≈hn+1,i(Xn+1(k)+ϵej)−hn+1,i(Xn+1(k))ϵ.\\left[J\\left(\\mathcal{X}_{n+1}^{(k)}\\right)\\right]_{i, j} \\approx \\frac{h_{n+1, i}\\left(\\mathcal{X}_{n+1}^{(k)}+\\epsilon \\mathbf{e}_j\\right)-h_{n+1, i}\\left(\\mathcal{X}_{n+1}^{(k)}\\right)}{\\epsilon} . [J(Xn+1(k)​)]i,j​≈ϵhn+1,i​(Xn+1(k)​+ϵej​)−hn+1,i​(Xn+1(k)​)​. 其中, ej\\mathbf{e}_jej​ 是第 j\\mathrm{j}j 个元素为 1 的单位向量, ϵ\\epsilonϵ 是一个极微小量, hn+1,ih_{n+1, i}hn+1,i​ 表示 hn+1h_{n+1}hn+1​ 的第 i\\mathrm{i}i 个自由度。 残差的求解 结合我们的数值格式, 对于任意给定的 X∗\\mathcal{X}_*X∗​, 残差可以通过下面五个步骤 求解: ∫BrF∗⋅Vdx=∫BrP∗:∇VdX,f∗=∫BrF∗δ(x−Xn)dX,{ρ(u∗−unΔt+un⋅∇u∗)−μΔun+1+∇p∗=f∗,∇⋅u∗=0,Un+1(X∗)=∫Ωu∗δ(x−Xn)dx,\\begin{gathered} \\int_{B_r} \\mathbf{F}_* \\cdot \\mathbf{V} \\mathrm{d} \\mathbf{x}=\\int_{B_r} \\mathbb{P}_*: abla \\mathbf{V} \\mathrm{d} \\mathbf{X}, \\\\ \\mathbf{f}_*=\\int_{B_r} \\mathbf{F}_* \\delta\\left(\\mathbf{x}-\\mathcal{X}_n\\right) \\mathrm{d} \\mathbf{X}, \\\\ \\left\\{\\rho\\left(\\frac{\\mathbf{u}_*-\\mathbf{u}_n}{\\Delta t}+\\mathbf{u}_n \\cdot abla \\mathbf{u}^*\\right)-\\mu \\Delta \\mathbf{u}_{n+1}+ abla p_*=\\mathbf{f}_*,\\right. \\\\ abla \\cdot \\mathbf{u}^*=0, \\\\ \\mathbf{U}_{n+1}\\left(\\mathcal{X}_*\\right)=\\int_{\\Omega} \\mathbf{u}_* \\delta\\left(\\mathbf{x}-\\mathcal{X}_{\\mathrm{n}}\\right) d \\mathbf{x}, \\end{gathered} ∫Br​​F∗​⋅Vdx=∫Br​​P∗​:∇VdX,f∗​=∫Br​​F∗​δ(x−Xn​)dX,{ρ(Δtu∗​−un​​+un​⋅∇u∗)−μΔun+1​+∇p∗​=f∗​,∇⋅u∗=0,Un+1​(X∗​)=∫Ω​u∗​δ(x−Xn​)dx,​ 进而计算出残差 h(X∗)\\mathbf{h}\\left(\\mathcal{X}_*\\right)h(X∗​) 。 Jacobian-free Newton-Krylov 方法 引入此算法的目的：原方法需要做 N + 1 次残差计算才能得到系数矩阵，Jacobian 矩阵的稀疏性未知，组装矩阵的组装与求解耗时。 Krylov 子空间 每步牛顿迭代都采用 Krylov 子空间法求解。令 b=−hn+1(Xn+1(k))\\mathbf{b}=-h_{n+1}\\left(\\mathcal{X}_{n+1}^{(k)}\\right)b=−hn+1​(Xn+1(k)​), A=J(Xn+1(k)),x=(Xn+1(k+1)−Xn+1(k))A=J\\left(\\mathcal{X}_{n+1}^{(k)}\\right), \\mathbf{x}=\\left(\\mathcal{X}_{n+1}^{(k+1)}-\\mathcal{X}_{n+1}^{(k)}\\right)A=J(Xn+1(k)​),x=(Xn+1(k+1)​−Xn+1(k)​), 令初值 x(0)=0\\mathbf{x}^{(0)}=\\mathbf{0}x(0)=0, 那么残差为 v=b\\mathbf{v}=\\mathbf{b}v=b, 构造 n\\mathrm{n}n 维 Krylov 子空间 Kn(A,v)=span⁡{v,Av,A2v,…,An−1v}⊆RN\\mathcal{K}_n(A, \\mathbf{v})=\\operatorname{span}\\left\\{\\mathbf{v}, A \\mathbf{v}, A^2 \\mathbf{v}, \\ldots, A^{n-1} \\mathbf{v}\\right\\} \\subseteq \\mathbb{R}^N Kn​(A,v)=span{v,Av,A2v,…,An−1v}⊆RN 其中 n≪Nn \\ll Nn≪N, 我们可以通过迭代法在空间 Kn(A,v)\\mathcal{K}_n(A, \\mathbf{v})Kn​(A,v) 中找到 Xn+1\\mathcal{X}_{n+1}Xn+1​ 的近 似解 JFNK 方法通过有限差分方法计算矩阵向量乘积, 无需知道 Jacobian 矩 阵 Av=hn+1(Xn+1(k)+ϵv)−hn+1(Xn+1(k))ϵ.A \\mathbf{v}=\\frac{\\mathbf{h}_{n+1}\\left(\\mathcal{X}_{n+1}^{(k)}+\\epsilon \\mathbf{v}\\right)-\\mathbf{h}_{n+1}\\left(\\mathcal{X}_{n+1}^{(k)}\\right)}{\\epsilon} . Av=ϵhn+1​(Xn+1(k)​+ϵv)−hn+1​(Xn+1(k)​)​. 本文采用 BiCGStab 方法。为了保证整体的效率, Xn+1(k+1)\\mathcal{X}_{n+1}^{(k+1)}Xn+1(k+1)​ 的求解通常不 要求达到很高的精度。 非线形求解器 Matrix-free Newton-Krylov 算法 时间自适应算法 CPU-GPU heterogeneous computing method 结果","tags":["未完成"]},{"title":"通过微信公众号在博客中发布动态","path":"/posts/14811/","content":"Stellar主题支持动态说说的功能。博主可以在仓库下面创建GitHub Issues，用户在浏览页面时，浏览器会通过JS脚本从GitHub拉取动态数据，呈现在页面中。但是博主每次发说说都要登陆GitHub，新建一个issue，在移动设备上完成这些操作不太方便。 我最初的想法是，通过微信公众号后台服务器发布GitHub Issues。博主只需在移动设备上的微信应用里发说说，公众号后台可以使用GitHub Token调用GitHub API发布issue，这样极大地简化了发布流程。但是一个GitHub Token代表着一位博主的身份，如果很多博主都希望能够使用这个微信公众号发说说，那么他们都要将自己的GitHub Token上传到公众号后台，这种做法不太安全。 Xaoxuu的想法是，我们可以开发一个GitHub Integration，博主安装这个应用的同时会授予它权限。完成授权后，应用后台会通过密钥定期调用GitHub API 获取用户的 access token。这样能让一个微信公众号安全地为多个博主提供发布动态说说的功能。 这个项目有大量工作要做： 媒体文件需要从微信服务器下载并上传到第三方服务器保存 走通 GitHub Integration 获取 access token 的流程 将微信用户ID和GitHub用户账号对应起来 调用 GitHub API 发布 GitHub Issues 注意！以下内容还未更新 通过微信发布issue，从而更新博客中的个人动态。虽然这是一个小功能，但是后期仍需要大量改进，有时间会开一个github仓库存代码，目前就将所有代码放在这个文档里了。 前言 流程如下： 在微信客户端给公众号发消息 微信服务器接受到消息，将数据转发给公众号后台服务器 公众号后台服务器下载数据，将数据处理后转发给GitHub服务器 GitHub服务器将数据添加到仓库的issue中，至此，博客中能显示动态 公众号后台服务器接收到GitHub成功添加issue的通知 公众号后台服务器将通知转发给微信服务器 微信服务器将通知发送到微信客户端 首先有个问题是微信服务器不会长期保存用户发送的数据，所以公众号服务器在处理数据时，需要将图片等数据从微信服务器上下载下来，上传到第三方服务器长期保存。这里可以选用GitHub仓库或者七牛云存储。 还有一个问题，由于微信对个人订阅号的限制，我的公众号只能被动回复消息。即用户发一条消息，我回复一条。微信还限制了公众号必须在五秒内做出回应，否则判定服务器故障。因此，当用户发来视频等比较大的数据时，我不能在5秒钟内处理完，必须先给用户答复我已经收到消息了，之后再在后台处理。由于我不能主动向用户发送消息，因此在用户下次给我发消息前，我无法告知用户我是否已经成功处理完数据。这个问题很蛋疼。 我在网上找到了类似功能的代码，一个是BBtalk，他的功能和我的类似，通过微信公众号发送个人的想法，小灵感等，经过公众号后台服务器转发，最终呈现在自己的博客中。只不过他用了leancloud的服务。 https://bb.js.org/quick-start.html 在此过程中，我还发现一个项目，mastodon(长毛象)，是一个去中心话社区，类似于微博、twitter等网站，而且提供了丰富的API，以后有时间再慢慢聊这个吧。 https://www.zhihu.com/question/67166897/answer/2323395370 https://mastodon.li 通过 GitHub API 上传文件 官方文档： https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#about-the-repository-contents-api 一篇相关博客(代码有错)： https://www.cnblogs.com/lizaza/p/12896536.html 下面是我修改的代码： QIHS.pyimport requestsimport base64import jsonimport hashlib# 参数设置# 我把GitHub图床翻译成 GitHub Image Hosting Service, 然后取他的简写为GIHS。GIHS_OWNER = &quot;shaoyaoqian&quot;GIHS_REPO = &quot;images-1&quot;GIHS_PATH = &quot;test&quot;GITHUB_TOKEN = &quot;自己申请一个TOKEN&quot;url_stensil = &quot;https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;/contents/&#123;path&#125;/&#123;filename&#125;&quot;cdn_stensil = &quot;https://cdn.jsdelivr.net/gh/&#123;owner&#125;/&#123;repo&#125;/&#123;path&#125;/&#123;filename&#125;&quot;# 读取文件def open_file(file_path): with open(file_path, &#x27;rb&#x27;) as f: return f.read()# 将文件转换为base64编码，上传文件必须将文件以base64格式上传def file_base64(data): sha = CalcSha1(data) print(sha) data_b64 = base64.b64encode(data).decode(&#x27;utf-8&#x27;) return data_b64, shadef CalcSha1(data): # 哈希值的计算：https://stackoverflow.com/questions/7225313/how-does-git-compute-file-hashes/7225329#7225329 # 需要在原数据前加上 &quot;blob &#123;字节长度&#125;\\0&quot; sha1obj = hashlib.sha1() head = &#x27;blob &#123;&#125;\\0&#x27;.format(len(data)) sha1obj.update(head.encode(&#x27;utf-8&#x27;)) sha1obj.update(data) hash = sha1obj.hexdigest() return hashdef upload_file(filename): file_data = open_file(filename) token = GITHUB_TOKEN url = url_stensil.format(owner=GIHS_OWNER, repo=GIHS_REPO, path=GIHS_PATH, filename=filename) headers = &#123;&quot;Authorization&quot;: &quot;token &quot; + token&#125; content, sha = file_base64(file_data) data = &#123; &quot;message&quot;: &quot;Add a new file.&quot;, &quot;committer&quot;: &#123; &quot;name&quot;: &quot;robot&quot;, &quot;email&quot;: &quot;github@robot.com&quot; &#125;, &quot;sha&quot;:sha, &quot;content&quot;: content &#125; data = json.dumps(data) req = requests.put(url=url, data=data, headers=headers) req.encoding = &quot;utf-8&quot; re_data = json.loads(req.text) # 能返回文件sha值表示上传成功 print(re_data) print(re_data[&#x27;content&#x27;][&#x27;sha&#x27;]) # 在国内默认的down_url可能会无法访问，因此使用CDN访问 return cdn_stensil.format(owner=GIHS_OWNER, repo=GIHS_REPO, path=GIHS_PATH, filename=filename)if __name__ == &#x27;__main__&#x27;: filename = &quot;a.jpeg&quot; upload_file(filename) 通过七牛云SDK上传文件 QIHSfrom qiniu import Auth, put_file, etagimport qiniu.config# 七牛QINIU_ACCESS_KEY = &quot;NLI1UowRkIZiebmdEZ7MWNDLtPYeqJWkc90MFn_0&quot;QINIU_SECRET_KEY = &quot;NMgdo5YrD8zQhzc8ZGWH4t-pcGEeLOYzFYJZhiG-&quot;QINIU_CDN_BASE = &quot;https://china-qiniu-s3.pengfeima.cn/&quot;QINIU_BUCKET = &#x27;pengfei-npu&#x27;# 上传到七牛云图床，参考：https://developer.qiniu.com/kodo/1242/python# 默认存储到&quot;blog/moments/&quot;路径下def upload_file(filename, path=&quot;blog/moments/&quot;): #构建鉴权对象 q = Auth(QINIU_ACCESS_KEY, QINIU_SECRET_KEY) #要上传的空间 bucket_name = QINIU_BUCKET #要上传文件的本地路径 localfile = filename #上传后保存的文件名 key = path + filename #生成上传 Token，可以指定过期时间等 token = q.upload_token(bucket_name, key, 3600) ret, info = put_file(token, key, localfile, version=&#x27;v2&#x27;) print(info) assert ret[&#x27;key&#x27;] == key assert ret[&#x27;hash&#x27;] == etag(localfile) return QINIU_CDN_BASE + key 微信公众号后台程序 wechat.py# 使用前提：云主机(其实用免费的vercel也可以)、域名、微信公众号、七牛云账号、GitHub账号# 参考 : # python 微信公众号开发[1] 后台服务器端配置与公众号开发配置# https://blog.csdn.net/jinxiaonian11/article/details/104708996/# pip3 install flask, xmltodict, octokitpy, qiniufrom flask import Flask, request, abort, render_templateimport hashlibimport xmltodictimport time, datetimeimport jsonimport requestsfrom octokit import Octokit# 下面两行代码分别是七牛云图床和GitHub图床的上传文件的方式# 使用一行即可# from GIHS import upload_filefrom QIHS import upload_file# 微信的token令牌，参数的获取可参考：https://qiniu.pengfeima.cn/typora/202212031457547.pngWECHAT_TOKEN = &#x27;look_back_at_me&#x27;WECHAT_APPID = &quot;wxcc6a1b8adade3237&quot;, WECHAT_SECRET = &quot;29b97cdfd439873420ecf78e8221fdea&quot;# GitHubGITHUB_TOKEN = &quot;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&quot;GITHUB_OWNER = &#x27;shaoyaoqian&#x27;GITHUB_REPO = &quot;MerryJingle&quot;app = Flask(__name__)# 获取微信的access token，在获取音频和视频文件时用得到# 注意：虽然官方文档有向用户发送视频文件的方法，但本人多次尝试无法成功。有人询问过微信官方，但是微信官方不置可否。def get_access_token(): baseurl = &quot;https://api.weixin.qq.com/cgi-bin/token?&quot; params = &#123; &quot;grant_type&quot;:&quot;client_credential&quot;, &quot;appid&quot;: WECHAT_APPID, &quot;secret&quot;: WECHAT_SECRET &#125; r = requests.get(baseurl, params=params) access_token = r.json()[&quot;access_token&quot;] try: r = requests.get(baseurl, params=params) except Exception as e: print(e) return access_tokendef create_github_issue(title,body): octokit = Octokit(auth=&#x27;token&#x27;, token=GITHUB_TOKEN) issue = octokit.issues.create(owner=GITHUB_OWNER,repo=GITHUB_REPO,title=title,body=body) message = &quot;成功发布动态！ 日期：&#123;&#125; 内容：&#123;&#125; &quot;.format(issue.response.title,issue.response.body) print(message) return message@app.route(&quot;/&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])def wechat(): &quot;&quot;&quot;验证服务器地址的有效性&quot;&quot;&quot; # 开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带四个参数: # signature:微信加密, signature结合了开发者填写的token参数和请求中的timestamp参数 nonce参数 # timestamp:时间戳(chuo这是拼音) # nonce: 随机数 # echostr: 随机字符串 # 接收微信服务器发送参数 signature = request.args.get(&quot;signature&quot;) timestamp = request.args.get(&quot;timestamp&quot;) nonce = request.args.get(&quot;nonce&quot;) # 校验参数 # 校验流程： # 将token、timestamp、nonce三个参数进行字典序排序 # 将三个参数字符串拼接成一个字符串进行sha1加密 # 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信 if not all([signature, timestamp, nonce]): # 抛出400错误 abort(400) # 按照微信的流程计算签名 li = [WECHAT_TOKEN, timestamp, nonce] # 排序 li.sort() # 拼接字符串 tmp_str = &quot;&quot;.join(li) tmp_str = tmp_str.encode(&#x27;utf-8&#x27;) # 进行sha1加密, 得到正确的签名值 sign = hashlib.sha1(tmp_str).hexdigest() # 将自己计算的签名值, 与请求的签名参数进行对比, 如果相同, 则证明请求来自微信 if signature != sign: # 代表请求不是来自微信 # 弹出报错信息, 身份有问题 abort(403) else: # 表示是微信发送的请求,第一次接入微信服务器的验证时才会使用 if request.method == &quot;GET&quot;: echostr = request.args.get(&quot;echostr&quot;) # 校验echostr if not echostr: abort(400) return echostr elif request.method == &quot;POST&quot;: # 表示微信服务器转发消息过来 # 拿取xml的请求数据 xml_str = request.data # 当xml_str为空时 if not xml_str: abort(400) # 将xml字符串解析成字典 xml_dict = xmltodict.parse(xml_str) xml_dict = xml_dict.get(&quot;xml&quot;) # MsgType是消息类型 这里提取消息类型 msg_type = xml_dict.get(&quot;MsgType&quot;) if msg_type == &quot;text&quot;: # 表示收到文本消息 # 构造xml格式的返回值, # 返回值会经由微信服务器回复给用户 # 其中： # ToUsername: (必须传) 接收方账号(收到的OpenID) # FromUserName: (必须传) 开发者微信号 # CreateTime: (必须传) 消息创建时间(整形) # MsgType: (必须传) 消息类型 # Content: (必须传) 回复消息的内容(换行:在Content中能够换行, 微信客户端就支持换行显示) # 发布GitHub issue title = time.strftime(&#x27;%Y年%m月%d日 %H:%M:%S&#x27;,time.localtime(time.time())) body = xml_dict.get(&quot;Content&quot;) message = create_github_issue(title,body) # 返回消息告知用户issue是否成功发布 resp_dict = &#123; &quot;xml&quot;:&#123; &quot;ToUserName&quot;:xml_dict.get(&quot;FromUserName&quot;), &quot;FromUserName&quot;:xml_dict.get(&quot;ToUserName&quot;), &quot;CreateTime&quot;:int(time.time()), &quot;MsgType&quot;:&quot;text&quot;, &quot;Content&quot;:message &#125; &#125; elif msg_type == &quot;image&quot;: # PicUrl 图片链接 # MediaId 图片消息的媒体id，图片被归为临时素材，通过统一接口调用。 # # resp_dict = &#123; # &quot;xml&quot;:&#123; # &quot;ToUserName&quot;:xml_dict.get(&quot;FromUserName&quot;), # &quot;FromUserName&quot;:xml_dict.get(&quot;ToUserName&quot;), # &quot;CreateTime&quot;:int(time.time()), # &quot;MsgType&quot;:&quot;image&quot;, # &quot;Image&quot;:&#123; # &quot;MediaId&quot;:xml_dict.get(&quot;MediaId&quot;) # &#125; # &#125; # &#125; # # 下载图片，以时间命名，为了确保图片文件名的唯一性，时间精确到纳秒(10^-6秒)，例如：2022-12-03-165018047661.png filename = datetime.datetime.now().strftime(&quot;%Y-%m-%d-%H%M%S%f&quot;)+&quot;.png&quot; r = requests.get(xml_dict.get(&quot;PicUrl&quot;)) with open(filename, &#x27;wb&#x27;) as f: f.write(r.content) # 上传 picurl = upload_file(filename) # 将图片链接改成markdown中的表达形式 body = &quot;![&#123;&#125;](&#123;&#125;)&quot;.format(filename, picurl) # 发布issue title = time.strftime(&#x27;%Y年%m月%d日 %H:%M:%S&#x27;,time.localtime(time.time())) message = create_github_issue(title,body) # 告知用户issue是否成功发布 resp_dict = &#123; &quot;xml&quot;:&#123; &quot;ToUserName&quot;:xml_dict.get(&quot;FromUserName&quot;), &quot;FromUserName&quot;:xml_dict.get(&quot;ToUserName&quot;), &quot;CreateTime&quot;:int(time.time()), &quot;MsgType&quot;:&quot;text&quot;, &quot;Content&quot;:message &#125; &#125; else: resp_dict = &#123; &quot;xml&quot;: &#123; &quot;ToUserName&quot;: xml_dict.get(&quot;FromUserName&quot;), &quot;FromUserName&quot;: xml_dict.get(&quot;ToUserName&quot;), &quot;CreateTime&quot;: int(time.time()), &quot;MsgType&quot;: &quot;text&quot;, &quot;Content&quot;: &quot;我不想回复&quot; &#125; &#125; # 将字典转换为xml字符串 resp_xml_str = xmltodict.unparse(resp_dict) print(resp_xml_str) # 返回消息数据给微信服务器 return resp_xml_strif __name__ == &#x27;__main__&#x27;: app.run(host=&#x27;0.0.0.0&#x27;, port=80)# sudo python3 wechat.py","tags":["未完成"]},{"title":"首次为开源项目提交代码","path":"/posts/26834/","content":"将自己的代码提交到他人的仓库中 前言 今天我给Stellar主题增加了一个功能，想把代码提交到上游仓库的主分支上，因此开了一个 pull request 。这是我第一次使用 pull request ，我总结了以下一些经验。 我自己在本地修改代码调试程序时，commit命令用得比较频繁，很多commit都是一些小修改，而且我会在代码中加入一些私货，我不想它们出现在别人的代码仓库中。我希望在pull request的时候只挑选出一些有用的commit，将它们合并成一个commit，再将它推送到上游仓库。 不啰嗦了，直接写步骤吧～ fetch 拉取上游仓库的主分支，将仓库的 upatream/main 分支更新到最新状态 在 upstream/main 分支创建并签出一个 dev 分支 使用 cherry-pick 挑选出有用的 commit 加到 dev 分支上 使用 rebase 将这些分支合并，并详写 message 解释代码的改动 在 github 上开启一个 pull requst 等待作者审阅代码","tags":["git"],"categories":["技术基础"]},{"title":"CFD问题中的稳定性分析","path":"/posts/55132/","content":"长期以来，在网上一直能看到这样的论断：因为有限元方法不能使用迎风格式，所以求解CFD问题时会遇到稳定性问题。对此我很困惑，我困惑的是他们为什么要纠结显格式的稳定性问题，用隐格式或半隐格式就是无条件稳定的呀。例如下面这个数值格式 un+1−unΔt+un+1⋅∇un=f,\\frac{\\boldsymbol{u}^{n+1}-\\boldsymbol{u}^n}{\\Delta t}+\\boldsymbol{u}^{n+1}\\cdot abla\\boldsymbol{u}^{n}=\\boldsymbol{f}, Δtun+1−un​+un+1⋅∇un=f, 我只分析时间离散的稳定性 用现代数值计算理论分析一下很容易得出它是无条件稳定的，并且我自己也用数值试验验证过。我认为标准的有限元方法可以求解CFD问题，重点在于构造稳定的时间离散格式和寻找满足LBB条件的有限元空间。我特别希望有人告诉我，我的想法是错的，我哪里错了或者我哪里没考虑到。 我在李晓丽的论文中找到下面这样的论述：ERROR ANALYSIS OF THE SAV-MAC SCHEME FOR THE NAVIER-STOKES EQUATIONS求解NS方程的诸多困难之一是如何处理非线性对流项。本质上有三种处理方式：完全隐式，每个时间步都要求解一个非线性系统。半隐式，每个时间步都要求解一个变系数椭圆方程，这意味着每个时间步都需要重新组装系数矩阵。显式，每个时间步只需求解一次Stokes方程(两次Poisson型的方程，如果采用算子分裂格式)，但是有CFL条件限制，如果雷诺数较大，那么时间步长要取得非常小。 在Daniel Boffi的论文里是这样考虑对流项的：ERROR ANALYSIS OF THE SAV-MAC SCHEME FOR THE NAVIER-STOKES EQUATIONSNS方程中对流项的变分形式可以写成b(u,v,w)=ρf2((u⋅∇v,w)−(u⋅∇w,v)),b(\\mathbf{u}, \\mathbf{v}, \\mathbf{w})=\\frac{\\rho_f}{2}((\\mathbf{u} \\cdot \\boldsymbol{ abla} \\mathbf{v}, \\mathbf{w})-(\\mathbf{u} \\cdot \\boldsymbol{ abla} \\mathbf{w}, \\mathbf{v})),b(u,v,w)=2ρf​​((u⋅∇v,w)−(u⋅∇w,v)),这一项可以通过代入前一时间步的变量线性化，线性化后可以写成b(un,un+1,v).b\\left(\\mathbf{u}^n, \\mathbf{u}^{n+1}, v\\right).b(un,un+1,v).速度的无散度条件和适当的边界条件可以使这一项为零，不会影响数值格式的稳定性。 时间离散空间连续晚上我在看一篇论文：Unconditionally stable discretizations of the immersed boundary equations里面涉及到不可压NS方程全离散格式的稳定性证明，他的证明特别简洁。文中假设了无散度速度场与梯度场是正交的，即(u,∇p)=0.(\\mathbf{u}, abla p)=0.(u,∇p)=0.这其实是对边界条件的要求，其他论文里一般会假设u∈H01(Ω)\\mathbf{u}\\in H_0^1{(\\Omega)}u∈H01​(Ω)之类的条件。文中还直接使用了Laplace算子的负定性，即(Δu,u)≤0(\\Delta \\mathbf{u},\\mathbf{u})\\le0(Δu,u)≤0这样就能证明时间离散空间连续的情况是无条件稳定的。 全离散下面是可以用投影法求解的全离散格式u∗−unΔt=v2Δhu∗+fΔhϕ=1Δt∇h⋅u∗un+1=u∗−Δt∇hϕ\\begin{aligned}&amp;\\frac{\\mathbf{u}^*-\\mathbf{u}^n}{\\Delta t}=\\frac{v}{2} \\Delta^h\\mathbf{u}^* +\\mathbf{f}\\\\&amp;\\Delta^h \\phi=\\frac{1}{\\Delta t} abla^h \\cdot \\mathbf{u}^* \\\\&amp;\\mathbf{u}^{n+1}=\\mathbf{u}^*-\\Delta t abla^h \\phi\\end{aligned}​Δtu∗−un​=2v​Δhu∗+fΔhϕ=Δt1​∇h⋅u∗un+1=u∗−Δt∇hϕ​为了证明我们的数值格式是无条件稳定的，在空间离散后，第一个条件就是要求算子Δh\\Delta_hΔh​和算子∇h abla_h∇h​满足可交换性，即Δh∇hϕ=∇hΔhϕ\\Delta_h abla_h\\phi= abla_h\\Delta_h\\phiΔh​∇h​ϕ=∇h​Δh​ϕ这就要求Δh=∇h⋅∇h\\Delta_h= abla_h\\cdot abla_hΔh​=∇h​⋅∇h​其次，我们还要求边界条件满足适当要求，使得离散的无散度场和离散的梯度场是正交的，最后还用到了离散Laplace算子的负定性。 对流项对流项使用半隐格式就可以了。 投影方法中对流项对稳定性的影响∫Ωu⋅∇v⋅w dx=∫Ω∑i,jdui∂ivjwj dx=∫Ω∑i,jd∂i(uivjwj) dx−∫Ω∑i,jd∂i(uiwj)vj dx=∫Ω∑i,jd∂i(uivjwj) dx−∫Ω∑i,jd∂iuiwjvj dx−∫Ω∑i,jd∂iwjuivj dx(1)\\begin{aligned}&amp;\\int_{\\Omega}\\mathbf{u}\\cdot abla\\mathbf{v}\\cdot\\mathbf{w}\\;\\mathrm{d}\\mathbf{x}\\\\=&amp;\\int_{\\Omega}\\sum_{i,j}^d u_i\\partial_iv_jw_j\\;\\mathrm{d}\\mathbf{x}\\\\=&amp;\\int_{\\Omega}\\sum_{i,j}^d \\partial_i (u_iv_jw_j)\\;\\mathrm{d}\\mathbf{x}-\\int_{\\Omega}\\sum_{i,j}^d \\partial_i (u_iw_j)v_j\\;\\mathrm{d}\\mathbf{x}\\\\=&amp;\\int_{\\Omega}\\sum_{i,j}^d \\partial_i (u_iv_jw_j)\\;\\mathrm{d}\\mathbf{x}-\\int_{\\Omega}\\sum_{i,j}^d \\partial_i u_iw_jv_j\\;\\mathrm{d}\\mathbf{x}-\\int_{\\Omega}\\sum_{i,j}^d \\partial_i w_ju_iv_j\\;\\mathrm{d}\\mathbf{x}\\end{aligned}\\tag{1}===​∫Ω​u⋅∇v⋅wdx∫Ω​i,j∑d​ui​∂i​vj​wj​dx∫Ω​i,j∑d​∂i​(ui​vj​wj​)dx−∫Ω​i,j∑d​∂i​(ui​wj​)vj​dx∫Ω​i,j∑d​∂i​(ui​vj​wj​)dx−∫Ω​i,j∑d​∂i​ui​wj​vj​dx−∫Ω​i,j∑d​∂i​wj​ui​vj​dx​(1)在用能量放法分析投影方法时，中间会出现一项∫Ωun⋅∇u∗⋅un+1 dx(2)\\int_{\\Omega}\\mathbf{u}_n\\cdot abla\\mathbf{u}_*\\cdot\\mathbf{u}_{n+1}\\;\\mathrm{d}\\mathbf{x}\\tag{2}∫Ω​un​⋅∇u∗​⋅un+1​dx(2)其中，∇⋅un=0 abla\\cdot\\mathbf{u}_n=0∇⋅un​=0，∇⋅un+1=0 abla\\cdot\\mathbf{u}_{n+1}=0∇⋅un+1​=0，un+1=u∗\\mathbf{u}_{n+1}=\\mathbf{u}_{*}un+1​=u∗​。适当假设边界条件，u∣∂Ω=0\\mathbf{u}|_{\\partial\\Omega}=\\mathbf{0}u∣∂Ω​=0或者∂u∂n∣∂Ω=0\\frac{\\partial \\mathbf{u}}{\\partial \\mathbf{n}}|_{\\partial\\Omega}=\\mathbf{0}∂n∂u​∣∂Ω​=0。根据(1)的推导，可以得出∫Ωun⋅∇u∗⋅un+1 dx+∫Ωun⋅∇un+1⋅u∗ dx=0(3)\\int_{\\Omega}\\mathbf{u}_n\\cdot abla\\mathbf{u}_*\\cdot\\mathbf{u}_{n+1}\\;\\mathrm{d}\\mathbf{x}+\\int_{\\Omega}\\mathbf{u}_n\\cdot abla\\mathbf{u}_{n+1}\\cdot\\mathbf{u}_{*}\\;\\mathrm{d}\\mathbf{x}=0\\tag{3}∫Ω​un​⋅∇u∗​⋅un+1​dx+∫Ω​un​⋅∇un+1​⋅u∗​dx=0(3)进而得出∫Ωun⋅∇(u∗⋅un+1) dx=0(4)\\int_{\\Omega}\\mathbf{u}_{n}\\cdot abla (\\mathbf{u}_*\\cdot \\mathbf{u}_{n+1})\\;\\mathrm{d}\\mathbf{x}=0\\tag{4}∫Ω​un​⋅∇(u∗​⋅un+1​)dx=0(4)其实得出这个也没用。必须是后两项相等的情况下才能得出:∫Ωu⋅∇v⋅v dx=0\\int_{\\Omega}\\mathbf{u}\\cdot abla\\mathbf{v}\\cdot\\mathbf{v}\\;\\mathrm{d}\\mathbf{x}=0∫Ω​u⋅∇v⋅vdx=0"},{"title":"多重网格方法求解不可压流体","path":"/posts/3240/","content":"翻译自 A parallel multigrid Poisson solver for fluids simulation on large grids 1. 前言 略 我们主要的贡献 在[[自由表面流]]模拟中，混合了任意Dirichlet边界和Neumann边界的非规则[[体素化区域]]很常见，我们给出了处理这种问题的通用方法。之前有文章提出矩形区域上的几何多重网格方法[TO94, AF96, BWRB05, BWKS06, KH08]，也有文章提出非规则Neumann边界条件的处理(通过投影方法)[MCPN08]，但是没有将问题推广到一般情况。 我们使用了纯几何的、无矩阵的格式，并且收敛率能保持在常数的，与边界、几何无关。[BWRB05]提出了一种轻量的、无矩阵的几何多重网格方法应用于均匀的矩形区域的求解，然而将它推广到体素化区域很困难。[HMBVR05]在离散边界时嵌入了切割单元，导致体素化Poisson方程的离散不收敛，因为边界处出现了不稳定现象(啥不稳定?)。据[CLB09]所说， 即使使用高阶嵌入也不能得到常数收敛率，他们在嵌入[[背景格子]]的表面网格上求解Poisson方程时，注意到当[[格子]]不能解析网格时，收敛率会退化。由于找到收敛的几何解很困难[CFL07,CGR04,PM04]，很多人选择使用更加通用的代数多重网格方法，但是代数多重网格方法的初始化很耗费资源，并行化困难[TOS01]。 相较于广泛使用的ICPCG(incomplete Cholesky preconditioned conjugate gradient)求解器，我们的方法占用的内存少，收敛效果更好，并且更容易并行化。不像ICPCG，我们的方法不用显式存储预处理矩阵，能够在16GB内存中处理7682×1152768^2\\times 11527682×1152个体素。ICPCG需要稀疏回代过程(sparse backsubstition)，为了让这过程能够并行化，算法上需要做很多调整，而我们提出的方法不存在这个问题。最后，在中等规模的问题上，我们的求解器的速度相对于ICPCG有大幅提升，并且收敛率与网格大小无关，因此随着问题规模增加，我们的优势会更加明显。对于分辨率为1283128^31283的问题，我们可以在0.75秒内使残差下降10410^4104，对于7683768^37683的问题则只需大约一分钟。 2. 相关工作 多重网格方法的效率非常高，它在图形学中的应用非常多，包括图像处理[KH08, BWKS06, RC03], 烟雾模拟[MCPN08]，网格变形[SYBF06], 薄壳模拟 [GTS02], 布料模拟 [ONW08], 流体模拟 [CFL∗07, CTG10], 几何处理 [NGH04], 固体形变模拟 [OGRG07], 渲染 [Sta95, HMBVR05], 并已有效地移植到GPU [BFGS03, GWL∗03, GSMY∗08]。该领域大量工作聚焦于矩形区域的求解或者结合代数多重网格方法在非规则区域的求解，我们给出一些涉及了非规则区域和几何多重网格的工作。[HMBVR05]和[CLB∗09]将非规则区域嵌入规则的格子中，给出了非规则模板(用于迭代的模板？)。[RC03, ONW08]使用了从粗到细的几何网格层次，保证了不同网格层之间的网格能够对齐，但是这些方法要求网格在粗网格层能够完全解析(细网格由粗网格决定)， 因此这种方法无法解析精细的流体特征[SAB∗99]将多重网格作为CG方法的预处理器使用，而不是独立的求解器，这样能缓解一些算例中出现的不稳定现象。 多重网格方法作为预处理器求解Poisson方程可以参考论文 [Tat93] 它的并行化可参考 [TO94] 以及 [AF96]。[KH08] 引入了高阶并行多重网格求解器处理大型矩形图像。 3. 方法概览 我们要求解的是Poisson方程，见式(1)。 Δp=f in Ω⊂R3p(x)=α(x) on ΓD,pn(x)=β(x) on ΓN(1)\\begin{gathered} \\Delta p=f \\text { in } \\Omega \\subset \\mathbf{R}^3 \\\\ p(\\mathbf{x})=\\alpha(\\mathbf{x}) \\text { on } \\Gamma_D, \\quad p_n(\\mathbf{x})=\\beta(\\mathbf{x}) \\text { on } \\Gamma_N \\end{gathered} \\tag{1} Δp=f in Ω⊂R3p(x)=α(x) on ΓD​,pn​(x)=β(x) on ΓN​​(1) 区域边界 ∂Ω=ΓD∩ΓN\\partial \\Omega=\\Gamma_D \\cap \\Gamma_N∂Ω=ΓD​∩ΓN​ 被分成两个不相交的子集 ΓD\\Gamma_DΓD​ 和 ΓN\\Gamma_NΓN​ ，分别施加 Dirichlet边界条件和Neumann边界条件。对于流体模拟， Ω\\OmegaΩ 对应物体或液体，Dirichlet边界条件施加在空气和水的界面上，Neumann边界条件施加在流体和浸没固体(或容器内壁)的边界。不失一般性，我们假设Neumann边界条件为零 (β(x)=0)(\\beta(\\mathbf{x})=0)(β(x)=0) ，因为非零边界条件可以通过修改右端项实现。 注：这其实很好理解，速度为Dirichlet边界的时候，压强为Neumann边界。 3.1 离散 我们将Poisson方程在均匀的笛卡尔网格上离散，将未知的压强变量 pijkp_{ijk}pijk​ 存储在单元格的中心。在我们的方法中，计算区域和边界区域的精度由背景网格决定。具体来说，计算区域以一系列网格单元(或体素)来表示，我们称它们是内部单元(图一右中的灰色单元)。我们将边界单元也体素化，将Dirichlet边界条件定义在一个体素化区域，而不是将它施加在边界 ∂Ω\\partial \\Omega∂Ω 上。我们称之为Dirichlet单元(图一右中的红色单元)。类似地，我们可以通过栅格化固体和容器内壁定义Neumann单元(图一右中的蓝色单元)。 因为压强定义在单元中心，Neumann边界条件可以很自然地施加在内部单元和Neumann单元的分界面上，我们在第四节中会给出简单实现。我们假设我们的计算区域周围一直都有Neumann单元作为“ghost”层，如图一所示。这样的假设不是一般性，因为对于Dirichlet边界，我们再加一层额外的Neumann单元也不影响Ω\\OmegaΩ中的结果。对每一个内部单元，我们构造出如下Poisson方程的离散格式： ∑(i′,j′,k′)∈Nijk∗pi′j′k′−pijkh2=fijkNijk={(i±1,j,k),(i,j±1,k),(i,j,k±1)}Nijk∗={(i′,j′,k′)∈Nijk:cell⁡(i′,j′,k′) is not Neumann }(2)\\begin{gathered} \\sum_{\\left(i^{\\prime}, j^{\\prime}, k^{\\prime}\\right) \\in \\mathcal{N}_{i j k}^*} \\frac{p_{i^{\\prime} j^{\\prime} k^{\\prime}}-p_{i j k}}{h^2}=f_{i j k} \\\\ \\mathcal{N}_{i j k}=\\{(i \\pm 1, j, k),(i, j \\pm 1, k),(i, j, k \\pm 1)\\} \\\\ \\mathcal{N}_{i j k}^*=\\left\\{\\left(i^{\\prime}, j^{\\prime}, k^{\\prime}\\right) \\in \\mathcal{N}_{i j k}: \\operatorname{cell}\\left(i^{\\prime}, j^{\\prime}, k^{\\prime}\\right) \\text { is not Neumann }\\right\\} \\end{gathered} \\tag{2} (i′,j′,k′)∈Nijk∗​∑​h2pi′j′k′​−pijk​​=fijk​Nijk​={(i±1,j,k),(i,j±1,k),(i,j,k±1)}Nijk∗​={(i′,j′,k′)∈Nijk​:cell(i′,j′,k′) is not Neumann }​(2) 在这个定义中， Nijk\\mathcal{N}_{i j k}Nijk​ 表示和内部单元 (i,j,k)(i,j,k)(i,j,k) 有共同表面的六个邻接单元的集合， Nijk∗\\mathcal{N}_{i j k}^*Nijk∗​ 是 Nijk\\mathcal{N}_{i j k}Nijk​ 的子集，排除了任意Neumann单元。 hhh 表示网格步长。方程 (2) 是从标准的七点有限差分方法修改得到的，用零Neumann边界条件 (pi′j′k′−pijk)/h=0\\left(p_{i^{\\prime} j^{\\prime} k^{\\prime}}-p_{i j k}\\right) / h=0(pi′j′k′​−pijk​)/h=0保证Neumann边界上的压强为零。在内部单元上，是标准的七点有限差分方法。这个公式和[FM96,FF01]中的公式是一样的。 3.2 多重网格迭代 我们介绍用几何多重网格方法求解式(2)定义的Poisson问题。我们的方法使用了V-Cycle作为多重网格校正格式[TOS01]，Algorithm 1给出了每一次V-Cycle迭代的伪代码。 V-Cycle 过程需要将Poisson在L+1L+1L+1层网格上离散，将这些网格记为 L(0),L(1),…,L(L)\\mathcal{L}^{(0)}, \\mathcal{L}^{(1)}, \\ldots, \\mathcal{L}^{(L)}L(0),L(1),…,L(L)，其中 0 层网格是最细的网格，L层网格是最粗的网格。我们也定义了每一层网格的光滑子和不同网格层之间的限制/插值算子。 我们的方法是纯几何的，我们构造出每一层网格的像素化描述，将单元分类为内部单元、Dirichlet单元、Neumann单元。根据像素化表示构造出离散的Poisson算子L\\mathcal{L}L。每一层网格的粗化采用8-1的模板，生成网格间距为原网格两倍的粗网格。我们的层次结构很深：最粗的网格层通常是8×8×88 \\times 8\\times 88×8×8。这样的粗化方法能够保证粗网格边界始终与细网格一致(见图2)。 如果一个粗网格单元粗化前的八个细网格单元中的任何一个是Dirichlet单元，那么它将被标记为Dirichlet单元。如果八个细网格单元中没有一个是Dirichlet单元，但至少有一个是内部单元，那么粗网格单元将被标记为内部单元。其他情况，则将粗网格单元标记为Neumann单元。 如图2所示，当粗网格不能精确解析细网格的特征时，这种粗化策略会导致细网格和粗网格之间存在显著差异，甚至会改变区域的拓扑结构，例如Neumann气泡会被吸收进内部区域，薄层状的内部区域会被吸收进Dirichlet区域。我们待会儿介绍这些差异会造成的影响。 限制算子通过张量积木板构造， R=B⊗B⊗B\\mathcal{R}=\\mathcal{B} \\otimes \\mathcal{B} \\otimes \\mathcal{B}R=B⊗B⊗B ，其中 B\\mathcal{B}B 是 1D1 \\mathrm{D}1D 模板，由4节点构成： (Buh)(x)=18uh(x−3h2)+38uh(x−h2)++38uh(x+h2)+18uh(x+3h2)=u2h(x)\\begin{aligned} \\left(\\mathcal{B} \\mathbf{u}^h\\right)(x)=&amp; \\frac{1}{8} u^h\\left(x-\\frac{3 h}{2}\\right)+\\frac{3}{8} u^h\\left(x-\\frac{h}{2}\\right)+\\\\ &amp;+\\frac{3}{8} u^h\\left(x+\\frac{h}{2}\\right)+\\frac{1}{8} u^h\\left(x+\\frac{3 h}{2}\\right)=u^{2 h}(x) \\end{aligned} (Buh)(x)=​81​uh(x−23h​)+83​uh(x−2h​)++83​uh(x+2h​)+81​uh(x+23h​)=u2h(x)​ 图三左给出了该张量积木板的2D形式，由16个节点构成。因为我们的变量位于单元格中心，因此粗网格上的变量和细网格上的变量不会有位置重合的。 延拓算子通过 PI=8B⊗B⊗B\\mathcal{P}^I=8 \\mathcal{B} \\otimes \\mathcal{B} \\otimes \\mathcal{B}PI=8B⊗B⊗B 定义，换句话说，就是转置、缩放后的限制算子我们可以验证这个延拓算子是一个三线性插值算子。只有当限制算子或插值算子的输出结果位于内部单元上时，我们才使用它们。当限制算子或插值算子的输入不位于内部单元时，我们用零值代替。 我们使用系数为w=2/3w=2/3w=2/3的加权Jacobi迭代，用它求解Poisson方程是稳定的，并且在并行效率上比Gauss-Seidel方法好。对于具有混合边界条件和不规则几何区域的问题，通常要在计算区域边界附近执行额外的迭代计算。我们将距离Dirichlet单元或Neumann单元三个单元以内的内部单元记为边界区域，如图三右的黑色阴影区域所示。总之，我们在边界区域进行一些额外的Gauss-Seidel迭代，在整个区域进行加权Jacobi迭代。具体来说，我们一开始会在边界区域进行数次Gauss-Seidel迭代，然后再在整个区域进行加权Jacobi迭代，最后再在边界进行额外的Gauss-Seidel迭代。 3.3 多重网格预处理共轭梯度 4. 实现与优化 5. 算例","tags":["未完成"]},{"title":"图床","path":"/posts/27346/","content":"如果有人告诉你，谁家提供的图床服务速度快，稳定可靠，价格便宜，那一定是骗人的。我不会使用微博，因为他本来就不提供图床服务，后面图片访问不了了，求谁都没用。我也不会使用私人搭建的图床服务，提供类似服务的人一般都很善良，但是抵挡不住太多变数。我偏向于选择那些已经成立多年了的云服务商，虽然他们也会卷钱跑路，那种情况只能自认倒霉了。 图床需要云存储搭配CDN加速使用，个人感觉比较好的方案是GitHub仓库搭配又拍云CDN加速。 存储： GitHub(首选) 七牛云 又拍云 CDN加速： Cloudflare 七牛云 又拍云(首选) GitHub图床 GitHub仓库中的资源可以通过域名raw.githubusercontent.com访问，但在国内访问此地址速度极慢。有四种方式可以访问GitHub图床。 1. GitHub Pages ←\\leftarrow← CDN ←\\leftarrow← 自定义域名 使用 GitHub 提供的 GitHub Pages 服务，将仓库发布为静态网站，添加自定义域名，通过自定义域名加速。静态网站中的资源可以通过 [username].github.io/[path]/[filename] 获取，添加自定义域名后可以通过自定义域名 [subdomain].[domain].com/[path]/[filename] 获取。对域名 [subdomain].[domain].com 进行 CDN加速便能在国内快速访问这些资源。GitHub Pages 对仓库大小的限制为1G，但是我们可以创建多个仓库，每个仓库绑定新的子域名。GitHub仓库和子域名是一一对应的，未来将图床迁移出GitHub也非常方便。 在个人设置中添加自定义域名 新建仓库后，在仓库设置中开启Pages功能，并设置自定义域名 在PicGo中设置自定义域名 最后在又拍云中加速这个自定义域名 2. Vercel ←\\leftarrow← CDN ←\\leftarrow← 自定义域名 通过 Vercel 反向代理加速 GitHub 仓库中的文件(部署参考：https://blog.csdn.net/qq_39010320/article/details/119923538 )。部署完成后，原 GitHub 仓库中的文件路径为： https://raw.githubusercontent.com/shaoyaoqian/images-1/main/images/202211170920796.pnghttps://raw.githubusercontent.com/&#123;owner&#125;/&#123;repository&#125;/&#123;branch&#125;/&#123;path&#125;/&#123;filename&#125; 可以通过 Vercel 反向代理的地址访问。 https://images-1.vercel.app/images/202211170920796.pnghttps://images-1.vercel.app/&#123;path&#125;/&#123;filename&#125; &#123; &quot;version&quot;: 2, &quot;routes&quot;: [ &#123;&quot;src&quot;: &quot;/(.*)&quot;,&quot;dest&quot;: &quot;https://raw.githubusercontent.com/shaoyaoqian/images-1/main/$1&quot;&#125; ]&#125; 自定义域名 在 Vercel 中设置 在 Cloudflare 中设置 自建图床 这算不算滥用？ 这个网站主要使用了GitHub提供的服务，因此我研究了一下他们的服务条款。 https://docs.github.com/cn/site-policy/github-terms/github-terms-for-additional-products-and-features 这里说了，不要将GitHub Action拿来提供CDN服务和无服务器云计算服务，这会给GitHub服务器带来很大负担。但GitHub没有禁止这种行为，因为后面又说了，如果这些行为不会给他们服务器带来很大负担，那你用一用也没事。我们用GitHub Action编译Hexo网站当然不算CDN服务和无服务器云计算服务。 https://docs.github.com/cn/pages/getting-started-with-github-pages/about-github-pages GitHub Pages也有使用限制，仓库不能超过1GB，发布的网站不能超过1GB，每个月带宽不能超过100GB，这已经远大于我的使用需求了。 https://docs.github.com/cn/repositories/working-with-files/managing-large-files/about-large-files-on-github GitHub 仓库的体积没有明确说有体积限制，建议在1GB以下，超过5GB会发邮件提醒你，但没有强制性的要求。但是如果这个仓库按照上面说的，使用了自定义域名作为图床链接，那么仓库会被限制在1G以内，否则就加速失效了。 综上，只要不给他们的服务器带来很大的负担，把GitHub仓库当个人图床使用根本不会有人来管你。 CDN服务的选择 七牛云 Https收费，http有10G免费流量。 Cloudfare Cloudflare提供的CDN服务是免费的，SSL也是免费的，但是Cloudflare的服务器全在国外，大陆访问特别慢。 又拍云 和七牛云差不多，但是如果在自己网站上挂个广告，那么可以免费使用一年 我使用了又拍云CDN加速。","categories":["网站建设"]},{"title":"在Stellar主题中使用数学公式","path":"/posts/5207/","content":"前言 在使用时默认插件时，很多公式都显示不出来，默认的配置文档里说推荐使用Pandoc，我就尝试了一下。 启用Mathjax插件 在主题配置文件themes/stellar/_config.yml中找一找mathjax的配置，拷贝到我们自己的配置文件中。 _config.stellar.ymlplugins: # MathJax # 需在Markdown文件开头加入mathjax: true # 推荐使用Pandoc: npm uninstall hexo-renderer-marked --save &amp; npm install hexo-renderer-pandoc --save mathjax: enable: true cdn: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML 将插件修改成启用enable: true，重新编译一下就能生效了。 hexo clean &amp;&amp; hexo generate &amp;&amp; hexo serve 但是有很多公式显示不出来，我们要将默认的插件hexo-renderer-marked换成hexo-renderer-pandoc。在命令行里输入以下命令修改插件。 npm uninstall hexo-renderer-marked --save npm install hexo-renderer-pandoc --save 因为hexo-renderer-pandoc依赖于Pandoc，我们还要在电脑上安装pandoc，我用的是MacOS，可以通过homebrew安装，安装好后，重新生成一下就好了。 brew install pandochexo clean &amp;&amp; hexo generate &amp;&amp; hexo serve 现在我们能看到全部公式了，以下分别是hexo-renderer-marked和hexo-renderer-pandoc的显示效果。 hexo-renderer-markedhexo-renderer-pandoc 最后，因为hexo-renderer-pandoc依赖Pandoc，如果要通过GitHub Action发布，那么需要在yml文件中添加： # 在step下面加上 - name: Install Pandoc run: | wget https://github.com/jgm/pandoc/releases/download/2.7.2/pandoc-2.7.2-1-amd64.deb sudo dpkg -i pandoc-2.7.2-1-amd64.deb# Other steps# ...... 存在问题 时间线出现了问题。 我不想用pandoc了，那么就删除pandoc，切换回hexo-renderer-marked，一切都可以恢复原样。 反正我是放弃了，博客里写那么多公式干嘛。 brew uninstall pandocnpm install hexo-renderer-marked --save npm uninstall hexo-renderer-pandoc --save 问题的解决 不要用hexo-renderer-marked和hexo-renderer-pandoc，用hexo-renderer-kramed，输入三行命令解决所有问题。 npm uninstall hexo-renderer-marked --save npm uninstall hexo-renderer-pandoc --savenpm install hexo-renderer-kramed --save Hexo 搭建个人博客（完结）Hexo 相关问题和优化 pandoc完美解决MathJax中多行公式和Markdown的冲突 问题2：行内公式有`_`时，需要替换成`\\_`，否则会被识别为markdown语言`_斜体_`用 katex + hexo-renderer-markdown-it-plus 替换了 mathjax + hexo-renderer-kramed。 参考: https://www.micdz.cn/article/katex-on-volantis/ 更新: 2022-11-26","categories":["网站建设"]},{"title":"利用Github Action部署博客","path":"/posts/52166/","content":"前言 在看了大佬Felix Chen的博客利用Github Action部署博客后，我也在GitHub上部署了自己的博客，创建了两个仓库，一个当源码仓库，一个当网页仓库。我就讲讲跟他不一样的地方吧。 使用submodule命令 与他不同的是，我使用了submodule来保持stellar主题的最新状态。源代码仓库每次更新后，都会自动拉取最新版本的stellar主题，然后编译、发布。 fork一份到自己仓库，不仅能实时更新，还能自定义修改。 git submodule add https://github.com/shaoyaoqian/hexo-theme-stellar.git themes/stellar 网页仓库的发布任务 我的网页仓库不以.github.io结尾，网页仓库更新后，网站内容不会自动更新。因此需要添加一个脚本文件执行发布任务。详细来说，源码仓库的更新会触发源码仓库执行编译命令，源码仓库完成编译后，将生成的文件发布到网页仓库，网页仓库收到文件会触发自己的发布任务，发布新的网站。 通过GitHub Action创建GitHub Pages时，会生成一个默认的static.yml，我就是复制了这个文件，放在网页仓库中。 .github/workflows/autodeploy.yml# Simple workflow for deploying static content to GitHub Pagesname: Deploy static content to Pageson: # Runs on pushes targeting the default branch push: branches: [&quot;main&quot;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch:# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pagespermissions: contents: read pages: write id-token: write# Allow one concurrent deploymentconcurrency: group: &quot;pages&quot; cancel-in-progress: truejobs: # Single deploy job since we&#x27;re just deploying deploy: environment: name: github-pages url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125; runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Setup Pages uses: actions/configure-pages@v2 - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: # Upload entire repository path: &#x27;.&#x27; - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 之后，我们只要在源码仓库提交文件就行了，后面GitHub Action会自动发布网站。","categories":["网站建设"]},{"title":"用 lightbox 实现灯箱效果","path":"/posts/12277/","content":"灯箱效果是指，将图片放大弹出显示，并将背景变暗，以突出图片。具体到网页中，用户点击图片会弹出一个放大的图片窗口，原网页变暗成为背景。随着博主Javascript技能树逐渐点开，本站使用了功能更加强大的Fancybox，本文所述方案已经弃用，但作为博客早期的真实写照，本文还是留着吧。 Markdown语言与html语言 我们先要了解Markdown语言是怎么被解释成HTML语言。以下markdown语言 ![image-20221006234019929](https://raw.githubusercontent.com/mapengfei-nwpu/personal_pictures/main/typora_picgo/202210061555638.png)图片 ![image-20221006234019929](https://raw.githubusercontent.com/mapengfei-nwpu/personal_pictures/main/typora_picgo/202210061555638.png)&lt;small&gt;这是我保存在旧手机上的图片，2021年国庆，给老师做的PPT&lt;/small&gt; 分别会被解析成 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mapengfei-nwpu/personal_pictures/main/typora_picgo/202210061555638.png&quot; alt=&quot;image-20221006234019929&quot;&gt;图片&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mapengfei-nwpu/personal_pictures/main/typora_picgo/202210061555638.png&quot; alt=&quot;image-20221006234019929&quot;&gt;&lt;small&gt;这是我保存在旧手机上的图片，2021年国庆，给老师做的PPT&lt;/small&gt;&lt;/p&gt; 如果图片后面不是文字，或者空了一行，那么会就会被解释成 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mapengfei-nwpu/personal_pictures/main/typora_picgo/202210061555638.png&quot; alt=&quot;image-20221006234019929&quot;&gt;&lt;/p&gt; 总之，解析后的HTML代码中有一对&lt;p&gt;&lt;/p&gt;标签，它的内部包含了一个&lt;img&gt;标签，图片链接保存在&lt;img&gt;标签中，我们要思考的是怎么处理&lt;img&gt;标签。 Lightbox 插件 我想要的效果是Lightbox2 (lokeshdhakar.com)，教程可以参考Generating an image gallery with Jekyll and Lightbox2。简单来说，我们要给原来的&lt;img&gt;标签包上一对&lt;a&gt;&lt;/a&gt;标签，剩下的交给Lightbox插件来处理就行了。包装后的HTML文本如下所示： &lt;a href=&quot;https://raw.githubusercontent.com/mapengfei-nwpu/personal_pictures/main/typora_picgo/202211061407124.png&quot; data-lightbox=&quot;example&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mapengfei-nwpu/personal_pictures/main/typora_picgo/202211061407124.png&quot;&gt;&lt;/a&gt; 我们要在浏览器加载完成HTML文本后，用js脚本遍历所有满足选择器img的元素，给他包上&lt;a&gt;&lt;/a&gt;，代码如下： &lt;script type=&quot;text/javascript&quot;&gt; function add_lightbox()&#123; $(&#x27;img&#x27;).each( function(index, val) &#123; var link = $(&#x27;&lt;a&gt;&lt;/a&gt;&#x27;).attr(&#123; &#x27;rel&#x27;: &#x27;lightbox&#x27;, &#x27;href&#x27;: $(val).attr(&#x27;src&#x27;), &#x27;data-lightbox&#x27;:&quot;roadtrip&quot; &#125;); $(val).parent().prepend(link); link.append($(val)); &#125; ) &#125;; &lt;/script&gt; 要在body元素上调用这个函数，&lt;body onload=&quot;add_lightbox()&quot;&gt;，表示文档加载完毕后才会执行这个脚本。 修改后可以获得如下效果：","categories":["网站建设"]},{"title":"CDN加速","path":"/posts/17107/","content":"之前一直没弄明白CDN加速是怎么回事，自己捋了一下。 我的博客搭建在GitHub Pages上，通过域名xxx.github.io直接访问github的服务器，xxx.github.io叫做源站域名。使用了CDN加速服务后，CDN服务器会缓存源站的资源，之后我们浏览网页时就不用直接访问源站了，从CDN服务器上下载资源即可，这样就缓解了源站的压力。 这中间域名需要经过两次转换，自定义域名 →\\rightarrow→ CDN加速域名 →\\rightarrow→ xxx.github.io。其中，自定义域名是自己购买的域名，CDN加速域名是CDN服务商提供的，xxx.github.io是GitHub提供的源站。我们要先在CDN服务商处设置自定义域名和源站域名，如下图所示： 七牛云CDN服务的设置 设置好后，CDN服务商会提供一个CDN加速域名，复制这个CDN加速域名，到购买域名的地方，将自定义域名解析到CDN加速域名。最后再在GitHub Pages上设置自定义域名访问。这样就设置好了。接下来，我们访问网站时会发生一系列跳转：用户通过浏览器访问自定义域名(www.pengfeima.cn)→\\rightarrow→CDN加速域名(xxxxxx.xxxx.qiniu.com)→\\rightarrow→ 源站域名(shaoyaoqian.github.io)。 我们可以自行设置CDN服务器的缓存策略。缓存是有时限的，过了时限后，CDN服务器上的资源会失效，CDN服务器会从源站调取资源重新缓存。放宽缓存时限会减少源站的压力，但是用户可能访问不到最新的内容。 缓存时间设置 国内CDN加速有两个限制： 开启HTTPS服务需要CA证书，否则只能使用HTTP服务。 域名如果没有备案，那么只能覆盖海外CDN服务器。搭建在国内服务器上的网站需要备案，搭建在国外服务器上的网站无需备案，也无法备案。","categories":["网站建设"]},{"title":"ubuntu系统配置clash代理","path":"/posts/62627/","content":"ubuntu配置clash系统代理 本文仅简要记录过程 cd ~wget http://qiniu.pengfeima.cn/clash-linux-amd64-v1.11.12.gzgunzip clash-linux-amd64-v1.11.12.gzmv clash-linux-amd64-v1.11.12 clashmkdir Clashmv clash ./Clash cd ~/Clashwget -O Country.mmdb http://qiniu.pengfeima.cn/Country.mmdb 在windows版的clash中找到yaml文件 打开并加入secret:123456 将其拷贝到clash文件夹中 在网络设置中设置代理 启动clash 在浏览器中打开http://clash.razord.top/面板 输入参数 cd ~/Clashchmod +x clash./clash -d . ubuntu配置clash系统代理 cd ~wget http://qiniu.pengfeima.cn/clash-linux-amd64-v1.11.12.gzgunzip clash-linux-amd64-v1.11.12.gzmv clash-linux-amd64-v1.11.12 clashmkdir Clashmv clash ./Clash cd ~/Clashwget -O Country.mmdb http://qiniu.pengfeima.cn/Country.mmdb 在windows版的clash中找到yaml文件 打开并加入secret:123456 将其拷贝到clash文件夹中 在网络设置中设置代理 启动clash 在浏览器中打开http://clash.razord.top/面板 输入参数 cd ~/Clashchmod +x clash./clash -d . 至此，能正常访问谷歌学术。 命令行代理： export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890","tags":["linux"]},{"title":"用beamer做演示稿","path":"/posts/20229/","content":"首页和页脚 块环境和定理环境 beamer中的环境有两类即block和theorem，都是\\begin和\\end的结构。不同的是定理环境还有一些额外的功能，例如进行编号之类。 块环境(block) 默认块环境的一共有三种，block、alertblock和exampleblock，以下是使用方式和显示效果。 % Frame 1\\begin&#123;frame&#125;&#123;Basic Blocks&#125; \\begin&#123;block&#125;&#123;Standard Block&#125; This is a standard block. \\end&#123;block&#125; \\begin&#123;alertblock&#125;&#123;Alert Message&#125; This block presents alert message. \\end&#123;alertblock&#125; \\begin&#123;exampleblock&#125;&#123;An example of typesetting tool&#125; Example: MS Word, \\LaTeX&#123;&#125; \\end&#123;exampleblock&#125;\\end&#123;frame&#125; 对于块环境而言，可以通过block来设置块环境的通用属性，是否是圆角，是否带阴影。而块的颜色可以通过块名+title/block设置。例如对于alertblock，标题可以用\\setbeamercolor{block title alerted }{fg=,bg=}，block环境类似。 定理环境(theorem) 定理环境的template继承自block，色彩继承自structure，因此对于定理环境，并没有针对每一个定理环境的色彩和字体设置，不管是theorem还是example，属性是完全一样的，只是title的格式不一样。例如，对于theorem，标题是“定理1.2: 吃饭不饿定理”，对于example，标题是“例3.1： 吃饭不饿的反例”。所以定理环境没有太大修改的余地。 beamer中默认的定理环境包括theorem、definition、proof、example，我们可以自己增加新的定理环境，格式如下： 新定义定理环境： ewtheorem&#123;name&#125;[counter]&#123;text&#125;[section] name：标识这个环境的关键字（用于编程） text：真正在文档中打印出来的定理环境的名字 counter：计数器；一般新定义的定理环境会自己用一个新的计数器，但是可以在 counter 中传入其他的定理环境，表示和这个环境共用计数器。 section：定理编号依赖于某个章节层次（比如：定理1.1） 以下是简单例子： 首先增加假设环境。 ewtheorem&#123;hypothesis&#125;&#123;假设&#125; 然后在PPT里面使用它。 \\begin&#123;frame&#125; \\frametitle&#123;应变能函数需要满足的条件&#125; \\begin&#123;hypothesis&#125;[应变能函数的假设] 令$\\mathbb&#123;H&#125;$为对 $W$ 二阶求导得到的四阶张量： $$ \\mathbb&#123;H&#125;_&#123;\\alpha i \\beta j&#125;:=\\frac&#123;\\partial^2 W&#125;&#123;\\partial \\mathbb&#123;F&#125;_&#123;\\alpha i&#125; \\partial \\mathbb&#123;F&#125;_&#123;\\beta j&#125;&#125; \\text &#123;. &#125; $$ 假设存在$\\kappa_&#123;\\min &#125;,\\kappa_&#123;\\max &#125;&gt;0$使得 $$ \\kappa_&#123;\\min &#125; \\mathbb&#123;E&#125;^2 \\leqslant \\mathbb&#123;E&#125;: \\mathbb&#123;H&#125;: \\mathbb&#123;E&#125; \\leqslant \\kappa_&#123;\\max &#125; \\mathbb&#123;E&#125;^2 $$ 对任意二阶张量$\\mathbb&#123;E&#125;$成立。其中， $\\mathbb&#123;E&#125;^2=\\mathbb&#123;E&#125;: \\mathbb&#123;E&#125;, \\quad \\mathbb&#123;E&#125;: \\mathbb&#123;H&#125;: \\mathbb&#123;E&#125;=\\mathbb&#123;E&#125;_&#123;\\alpha i&#125; \\mathbb&#123;H&#125;_&#123;\\alpha i \\beta j&#125; \\mathbb&#123;E&#125;_&#123;\\beta j&#125;$。 \\end&#123;hypothesis&#125;\\end&#123;frame&#125; 参考： https://zhuanlan.zhihu.com/p/138021900 https://zhuanlan.zhihu.com/p/133244838 算法环境 需要使用包\\usepackage&#123;algorithm,algorithmic&#125; ，示例如下： \\begin&#123;algorithm&#125;[H] % HERE!!!!!!!!! \\caption&#123;显式格式的求解算法&#125; % give the algorithm a caption \\label&#123;alg1&#125; % and a label for \\ref&#123;&#125; commands later in the document \\begin&#123;algorithmic&#125; % enter the algorithmic environment \\REQUIRE $\\mathbf&#123;u&#125;_&#123;n&#125;,p_n,\\mathcal&#123;X&#125;_n$ \\STATE 限制算子，由$\\mathbf&#123;u&#125;_n$算出$\\mathbf&#123;U&#125;_n$ \\STATE 更新位移$\\mathcal&#123;X&#125;_&#123;n+1&#125;$ \\STATE 标准的有限元软件求解$\\mathbf&#123;F&#125;_&#123;n+1&#125;$ \\STATE 延拓算子，由$\\mathbf&#123;F&#125;_&#123;n+1&#125;$算出$\\mathbf&#123;f&#125;_&#123;n+1&#125;$ \\STATE 不可压NS方程的求解$\\mathbf&#123;u&#125;_&#123;n+1&#125;$和$p_&#123;n+1&#125;$ \\end&#123;algorithmic&#125; \\end&#123;algorithm&#125; 效果： 参考：https://www.zhihu.com/question/29888730/answer/45945434 参考文献 待续。。。","tags":["latex","beamer","演示稿"]},{"title":"课题组服务器资源分配","path":"/posts/35875/","content":"6031008eaf30dfa9f6cee48a6a69006e4d2307147359263829b2f62a1a2e7030229da9524b92f67ab4045da0cd1b464fab31901e542920f7adbfdf0d21ea725d943a664032e4445e2a2189b547dad5708ce63caf0d996a77b1b28ba5e01f20463f648838b1d649e03e7de05f84a3ae189c12f113a9c161165e4ce7176e9d483b38ed7b7fea7e38ee1dec730c6587c4ab616ab6a2b69bc809e12e87484f1c8ae41ce5bebbe7040529b0b3a1b028df67a7fdd700b46535616a08692e272304ce319036d911c315ee03a6371e68c774d7837e6228edeb26f931682bd90901cc6490eae2c4572ad23a51f703b2248e7b305b27d3ea03a7b525e5d7ec4ac005689f179ba767d9568afe12b11d5aeec3beb359fcd4e1fca89f3dab1fd152b198531465523e55615fc2c420fb0eb1b0b08c5e118e8995a69f0690142f3d1e43a8d470b3a15e1b5ac5ea67d12820229e011502bc9ce45f77d40e64028d0c4853018abcefaf396d45bf65dca8f94a4d12e4ed7fba0b128552cfc3f0f7b4f72083858c4ddbc96d37820fe90f49ca1f32b45c576b05abc39aa50f71c5926f32471891389a1d4849612914a2341489b49fe179f72d0397bdb7614459ea3c017f538eb96a98a07a7376e6d61587aea0ec0d7e40ac95abcf1fd6b4af614e1dfe7f8b6f29177780f973a7095db8ed580cce6980a9ddae2ba62109a7a5333c781562c7fa1e49177dd7d0700ad5204cc6af3e56f71501ef28d8e05c462e233c40ae795c0736d857fcab14f3acce39d3778662439c0b61f4a96da6382a64790a889adb878aafa18fc7f39f67cf09b1eeb719cb31845534c019210d79b50656892e8805735dcc64c2f02b5b9628915fbed65a4f3172f2aee8526fa94b490af294cb8e2b118d6fb3388ac00dd910190b0727aca3cc12fc9494ba56d2570a02a23416a0e988390cfab8a60c9b81014419e5a82175a5fc4a6470f75e758e80ca9dedcb45abba2a9d7f8b707663ba3d7314eb3cec006ec361337246a8870b74e100226ac2204fbf8c0bbe669283873162570259d6113ef73f0f3db6220901481caae6dbb2ffded03d268082fa0f143530ab476e177ca7c04dcb14e189b09cd505fc8c81e2268d07c76450b79e4acae3ed44ef1e6000ca3b83f3bd975bfc5460257f7c62d43fff6163e421f073f36708e451be27720e09c968812f0988bc40e034cac7e17af5e93ceea3719017d1326165bf9b711ff6b6f37a03b20f685c5769be220053a711385dffd0a4001b3424b093dfc2028b49defe65665c2330db64e9aca83e0da07aa5ff3fa438c3722a417bbe8bc42e45637019f879958aea316bdd6490c98a7924a4fcb25531cd89dc3753ce0a7f4d072d39cee50ff4ee4154e29b2ddcfd8cb288c21bd0c7bbc9d9f0d399af142949bc439884f2933df3a65203bd152b0dc5eb57de8eadd1e29af4d4ce46201029adcaf46309948e3d490cefe4c065ccf72a9c3ddc390c59d01bcc3402c03342275d793999f7423bbc8d667dbbef63faa8dbf3b4d6c940ccf5a2cc336181ec8e05972264b5c0c660f3f20b7b88a3998261d92ae6becf2463a579bbb4e0e4184ac280acd23eca0bc9ab7ec2503e6eddbb2626559bff5af8dc122ed240c20cf5cca0471ef1d536b71cfe4960fce11e1d193e1b58b210b0d9c83eb5e37732792c21bf84c882999f90d6a559f6661c9e01bf0783818e2cf1cb0661ef71fa5d01a120d96f667c2ef49f2f8b254d66043347545bdcd648808559f2a56b2a0fafe927106c4a0c76652120b3292a02883de57a4ebc2b4046597aee955135dc466ba9a78b582e94b3a471743ddd2f361c0647a391ffdba7099c103a6181cae1747c46f8b40ddb098514a35f729535e0770baedef836604a3f0e3dabf89f1708f56399a3dc6ab95caf00eb1f6dfab4ed6fe313ac53be11aa65cb03007e4a3ce407fcfc0a3b2e9bb4afce2a5e89f1d6ec526ca02a2489a3bafbeec1532016ee6293f767a4f817d16c98849551bb374136d1ebad77116d8582067be31784c859e9c89452b86f9e797da47bd57164d51cdcf3de0b123dd2e8733d8abd02b7f5e91d268c018f7903e17a87cb8f3842e61eb956c231ed22f4d42cd76d07a2fbeec85805c7503b12ffb102f392fb7f1df343a609d65d432254b264a91a1016d77012 访问需要密码","tags":["加密"]},{"title":"图片功能测试","path":"/posts/15648/","content":"空洞骑士Team Cherry没有可以思考的心智没有可以屈从的意志没有为苦难而哭泣的声音生于神与虚空之手你必封印在众人梦中散布瘟疫的障目之光你是容器你是空洞骑士诗词节选 2022年的图片 这里没有对齐是因为有些截图本身就有透明边缘。 .md-text img { border-radius:0px } 原来的图片插件。 这是一张示例图片 一些长宽相同的图片的排版。 一些长宽不同的图片的排版。 以下是一些更加混乱的图片，看看它们的排版。","categories":["网站建设"]},{"title":"有一天","path":"/posts/18603/","content":"6031008eaf30dfa9f6cee48a6a69006e4d2307147359263829b2f62a1a2e7030229da9524b92f67ab4045da0cd1b464fab31901e542920f7adbfdf0d21ea725d943a664032e4445e2a2189b547dad5708ce63caf0d996a77b1b28ba5e01f20463f648838b1d649e03e7de05f84a3ae189c12f113a9c161165e4ce7176e9d483b38ed7b7fea7e38ee1dec730c6587c4ab616ab6a2b69bc809e12e87484f1c8ae41ce5bebbe7040529b0b3a1b028df67a7fdd700b46535616a08692e272304ce319036d911c315ee03a6371e68c774d7837e6228edeb26f931682bd90901cc6490eae2c4572ad23a51f703b2248e7b305b27d3ea03a7b525e5d7ec4ac005689f179ba767d9568afe12b11d5aeec3beb359fcd4e1fca89f3dab1fd152b19853146549ef7c6978bf8ff5d7dc41b992a9dee81959ba865bff85101b6dccba52430a532980532b594aff1e2bb9928550d91ae01c50c4e864ed3e626ea6b121133255a5b4e1102a96f703dd24410455494d596d5d6cadcd17b29cdb412e90a0cb6b9efdb66b6b22fe5c1687587fb779605a97a8d83422b7562ca6f00654dd320cb04212495383b4ce7243e98123ca82fdc4af034185f2af2fea65c5504cde69a097a8f34ec8e62e86930ca321a6a7f6a66bffa2d335f1a4adf56b7025662c918ae0843bdc03ab42c84d0a347900b2e3e77891694aac98eced239e1c2b33358a3bb23cb51b897bb4fe30eb51315d00d5413229ee39390a0f0edac59e307a1716c45daad398b5c051610e5e6d541570ef0a754b5d6239d520f25e7898cb009035b5a738022246abed51cdc7e9054e6e340c1b21c0593dcc9416546127b09cbae5af51c5482902f6f1e3f5da8a4758cc8f3f2c88063d4a4f8bde58457c72bca32b89a091a5aa1d7fbad7a0001beafda5aa2a6512d9204da652207e39528f1df28a2647521b70a220512ddc5d728f65f8223e68c9cf4069fa8268349e3ba0f2a7671d28f1375e116e6cc446b2226b186af79e82a75f07538043523421043b13e64a53735f6b12ab45a0d184d91bf537d8e4fad26addd8fe4da6e6c0e409f57abd32f9c2f07d7c5383feeb68c2a3747f345cc84a267b7fda9b582c28385967538543d2befe5e0c6e6b569c8349761de143648b4559273d7f0abf21e9b54324bf876dd55deca4107459585eb76618252e59611799da5b90e3187c42d6d16d51206854ed348a2a9974d0618062d857633fa47f8df6602e283b67df6eb343e91811cb049f18d891e9bfffafbb8dcb1291c70a5b50506f932a6f6da5e1cc40b94af2553a99c85082702a6ab8949a07d2bf22492b4342567e9f1d561a0c88bf0ab5f45604fba7a142d4822190b06d31f4af8de62c19ffaf8ea25c0e735ad47258dd7a585f67580b2e6c9d029e3b4dd65f5604d5ec4d3e83765053c2e204caef6572c97b598ffe3880cf0af720c22cbc7e44d51a7741fe6ea7db4d8b1e986f62d2837ca0f34984b21e497e20c8605cf3a0c4308d3f9ceefa6af5908b34aef283220ea1e3d4fe81badbade420fa7aad7ca7492f7aa9df2e4d4cd143c4df224cee3b45a7347609617158a589ccf4fa91da7e246a679b65d6043c8272cb9f3c1feb2631eb22e51fabdb86e90aa92ef8b512badb77704ac5dca21ae61c5ebe6b13191170952d0497861851be4f22f4a64fd854f4aac33c5a504cd56e7785088b798d63e51b4e65a83c2d7cb057d2fbff18370b26582bea86c2fbd038d4c099dbd4ad717c6519f372ab7afcef68bb972eead1f937bb291d88707e06a2590c47631ad6b4f8e6319694bc53e80e7b7feca20e959e413477a3bbbedd4df78cbbf631e577fbcde0cf830f7b9f7406d9aae6f6e8dd6a6fa70ce7b5fb808a11264d22204d891f3afdffc4bdd45f8649aab6391ae0e0ae1171704f35397322ef575c90a3113ef318ab457a0c9bf858997c366e551be6439278021434680b4e05212cd7ad2b0433c0db9524accc0b9e1ef4be9d97abc1ec3bc70e17e83824940cfc27b91f4d4c425923f1dfeb15ea85af21ce37bbc6d2852b248272ea0cdf0044fcc6f91e79371a498ac59204ee9eb435c390b4ca4e4b64879a347fdb2fbc341a7a8c86c240cc66c815694382fac3eef469ac1e35149f78336d7d00ddd5ba41ad3169c76e7649b1fa593661b18cc5e6b140cfb4413c9be29c9f132e46dbddc65e9e056b68bcd8fb9ec753a05a82c31e4e692d2c35a2d5e95fc8c8b6ffc00a970f4d5c7a54381553b69916c99ff0297e07379daba8d31251ed735bdad33590639213a32379ccc71a8b8f0935fbcef0c71d70d45627cfe4943ef13556dfdceae12cdac9b332382ad6b93e573ba0aac16d231dd8c0ea7996d39e11dbf7814d1c32e49d42b49a4a280b03c9f36067d73f9e8fb281f39697f31ea3d570be7307567d905d144819e206ad6c966d05888402918a8ba60c7d12195ba4548233e158a2fa7213e6ea59299a09546e752d5cfe4ec04c3b18bff927e24525dadc3d8a90b6487ffbbab38d46592c99ba92b98d0f13ad0dd6257952a24d5b7e105620e3a1152c37a6af491797172bee9daa2f37060d4a108a987921ef3b92dd5da267c38c41374acde9db49b2c50d543509f5a095ca9737f8c183ee656f394663d929751d42a73fb202bc2ce05e49120c741cceb84e300199650f8dda7a641a6804a09696e0a006eab9e53cf69b49c2ad945b99f75c7cb5a6bec1dd9947ebf1869db645ba79d599ffe429ac496bc86e2438a0215c74b36b7be2689e27ff9b44c4210256f4e264794702e967d7c75c8d1d53a631e3f045c96abf81e8680da6ef89c361b114d99377c50ac254d8990983b7ba689b9136bae6aa9f491cd9a64e12a4cd93dbfca11209fbdeaa3ce29a4d8bc7acf9d6cc76da4a67ce560bb16b189ebc7951d76173d5c8c7d47b282f2c201df7db182faf756fa538298141763429c0bae8b2a727138e5410a87b07bfe57d4154a34046f4c73de4d03463ccea9c200f17ff935a5e6fb998e2277853212a697b6c50b93e8c14e6aa261f53264892f717d7a3ff16307e3779b6201a56694929c64abe11362c05aca39f8727177d78f9eee38c848e47d3cc8ee4da4b3e8fcc40a2538b66059b6d56bc70eabd93a228389086ed48ae0a6851d3f3970711836c40f9ed7fb895d6378b0c7188ac798a96505d41b6806ed9d02874f52a49b58b816dcef83e058189f10574f543bfcfbce98edee52eaa1dda70d37305195c506ab6ba7ef1886c235701eef139c9160c59a7a101458176a3c6f06f13f46c158ae0131997208403920c9b5087a8c17f77d8608f9f050abf7679c78d1d1fd73bb021a2bf70dedec95b978c2c123ecfbe0a51270897ccdeaa7de89e1d9a5e8a4c809b933258d909486ee857aadf47b930e8017c242c2473c47bf6cceb60f40636fa76e3d49261ccab5f170b910acb41183aa1142111b5d90172035a193fd04c5d5e793508cc5f4ce9b07eaf2885fdd358a919161d6f48b56984fc71b2ec8f985baa63c1759c34ccab32a05254ebf993bd0da7bdbae0e4422ce2919c3f9d635ec5a54926b700e79bcbbacc8cb8d7568d9b3d823205ac95097e3dac3f930b1041e3b7d672f4509a5988aa2586e10833b5ab188755dc898fadbbafdf95770d42699ced9899f240407cb01fb44382c4aef19779a110e81c9ff35014544407fac03296040d857078580b32fa08a8a9c0151d97b7558e3100d26c65def613c84cabaa037b99770b91df9114728da185adde6cf43f3cf09845316dfa12fb197db1b35757ac50c2920275124cf76bcf4e169fde15cda87df022d1f2fd610df1fc4465d090bc1ba890248ec3f99b3ada93278fdf0441504e91b3d36c29f1f88101a8c39571241fa01138553e871732e0f387f0d72dab56c01d2a1e9a5a94fa4a7920dda81ed71109a292609e099e368581d22f879579b42a1ab6866d83abc1340dafcd66986b93736012a7e652b21e9f1dca3037e0806602f70e416f74fa7afd0c03a8fab1a7dd2ffdabca5809abb8a563a21853f66b032269eb1b0523a7a69071df24d5223b54e35dbe03b54df51ebe659aeff3a2592a857b096f0e5bfcd971114d8086b3bda9cb635b11c594fe9a5ccfbb7b7737188fe4bc65d02c5ecade90503c5eee5f5f85514e86cb0d2febd1aa42e8f5c0ffaf2090dc77579abf1da67f96b54deb582a7612e202f312bdc3670844190baaf24be7c51dbd2b18f8aef823d08b5db6a85a7cc49981694a66488287195a412eaf4644c9594f26414d18fb63fcb27b81821f6bcfe55a2aaa0d86bc60221ad0c8b09f528361ea6112bc8a74730d12863cdd5cfbada0308cbbcc6ffedc0860ffe87c60d13ee90350f84fe9f4e0fd9d182226a9d158e27d1ba44f40f6112299019c60b76f856f1db3801315cc97b8604584eaa55d1b0febdb0566690578b0e188eda11ca431c96b48e37586ec96b4332769f1b94142c096bf7082c28ef3a8f00dca532207e3b0fd7daee1306cc17a94b155e6ec84c1266d8685c4586dd237f6d52812bcb8027fb981939ac525830313681d8e673073c8db56f135fc6a20cbf0fa5c43836986f172e2c911b32e7c682027caef0783fb44462ac9a266e37f35d5bd15c7e47bbe8370896fab01f0cc4e333458ebfb44d5d2abac8bf8a805d33af9aa7219e728fe6e983f555b7e36dcaf92adf11800f6438b485b7e19496f9acef917dafb89c3124deb13763b55f5bb0ce14d13523c52b7e22bce17af95bafa609c46b47d70719ed1c73f4f378c75353e57deef8bd734fb72a29f92f650ef466da709cec1d459b5fb14af86badfb90dbbb5c648b112de71418f5e3dfbec0cdf492e0df8336056f2baae50a0ca5135ad4804b43606fa0d936294e34afaf23ae4735c7fc5b7a524f00c776af0150b1208f3dae44387b525afe93cf0728c382fc07575da50ed943b0e0e07b9392e94f979e74134d478daf8862283afbabb8112586d57bb9a11d0ce846d668efbd1d5671fbd7f17b356e4800c827b15a4cf3befbb3f1539d7ce1aa52316176ea475294b5788e5eacf78f2fc552411cffb6c6815598663913c0019a19d972746478187a09daabd4648cbb3abe85077873416ce9be154d90566f98597188b6068abddd377aa5d766cd1269a412ab619bf1a19a251a2d743092880935055c9a997f0b96a954469922beff33216be439d92b9e0c89d5252db283b7ad5e480026a46bee9dc633d693ec4702fed0a1936d2d96b649d5ca2d312d1f85274988f08507de36460930b8b9bf2ab89361a6823adfd66fb6a869809 访问需要密码","tags":["加密","公众号"]},{"title":"2022年12月","path":"/posts/63420/","content":" 访问需要密码","tags":["加密"]},{"path":"/index.html","content":"MerryJingle，快乐的铃铛，为毕业发愁中，会点C++和CUDA，研究流固耦合问题遗忘十字路王国边缘皇后花园国王驿站遗忘十字路王国边缘 朋友圈关于留言相册运动 到底是哪个智障每次上厕所又是抽烟又是吐口水，把蹲坑搞得一塌糊涂 睡不着是因为想去回民街吃灌汤包了 我也要买个小提琴，天天锯木头给你们听 鸟不拉屎的五楼，走了弹电吉他的，来了个拉小提琴的，反正永远没有午睡的时间。 而且你拉什么不好要拉加勒比海盗主题曲 916还没来，我坐下吃个东东包吧。刚坐下吃，916就来了[二哈] 今天7.40醒来，明明赶得到模考的。我对自己说，你肯定会迟到的，还不如不去了。然后我就真的睡回去了。卧槽。我真的是那种注重结果，不注重过程的人吗？不对不对，我还是要去的。可是我已经昏睡过去了 睡陌生的床睡陌生的觉做陌生的梦我熟悉的人的人在打呼噜醒醒睡睡睡睡醒醒半睡半醒半夜又醒来 碰到一个不是很熟的人 唠嗑了半天才发现，我竟想不起这个人的名字 突然好害怕，他会不会问我，你知道我是谁吗 Voyager: To the Frontier 一部纪录片看得痛哭流涕 吃这么辣的面，是一个冒险。就像一个人徒步穿越沙漠，随时都可能暴毙在半路。 我竟然在微博上把戴安娜的纪录片看完了，而且一个半小时全程用的是流量 我有拖延症我常常对自己说再多活一分钟也没什么大不了的 然后我就活到了现在就这么糟糕地活着 我不敢去追求那些真正好的东西甚至在有机会拥有那些东西时主动拒绝 失眠，走到阳台上，看见261灯还亮着 昨天下午，我看着百度地图，走小路回学校，然后走到了绝路。一大爷看见我在暴雨中飞驰就借了我雨衣，还给我指了路。其老伴给我拿了毛巾，还拿出衣服叫我换，我有点不太好意思 虽说地震云是谣言，可是地震那天我也看到了奇奇怪怪的云，一条一条的 现在正下着暴雨，我正在别人家屋檐下躲着，还顺便帮你回答了代数的问题 昨天上课时的那妹子真好看 翻译了一半的短篇小说。 后面虐心不翻了。 暑假里最忧伤的事是 我竟然想不起来我穿拖鞋出门过，现在的我还是真正的我吗？ 我正在学习，常海粟来我们宿舍，说要弹吉他给我听。 他弹得没我好听，我就说我弹给你听，然后我就弹了，他走了我还在弹，mmp，我是要学习的。 昨天熬夜看权力的游戏，今天就好累，很不爽想打人。权力nmb，烂剧，让我熬夜的剧都是垃圾。 最近楼下在修管道，挖了好大的一个坑。 我可以在他们埋水管的时候叫他们把我也埋进去，那我就不用自己挖坑了。 加把劲，说不定下次就可以只错五个了[二哈] 我不是很确定，如果不能每时每刻都看到自己在进步，我还能坚持下去吗？ 伸手去拿爆米花时，在桶里不经意碰到姑娘的手，总是会有些尴尬的。 ……尤其是假如你们两个并不认识，而她又不知道你一直在拿她的爆米花吃的话… 一天到晚学英语，学累了就弹会儿吉他，然后一弹就好几个小时过去了，就感觉愧疚。 我是要好好学习的，不玩了。 看了 马男波杰克 以后，才知道 脏话 也是有境界的。像fuck 这样的词实在太low，应该说成my penis has been inside your vagina。 还有很恶心的一句，masturbating to old pictures of yourself[吐][吐] 分享图片 可能是因为他关注了他不好再取关的那个人，而他却也无法再面对他所关注的那个人，于是他便注销了帐号，也许他又申请了另一个号而且还继续偷偷的关注着他所关注的那个人，也许他再也不在，也可能是被拉黑了，我也不知道说的是什么😷 我是一匹学英语走火入魔的马。 歌词好 还是 翻译好 “我们喜欢朋友的方式，和喜欢艺术的方式是相同的。” 它可能包含了很多伤人的、不平等的、不道德的部分，但它仍然是美的、吸引人的。 日子每一天都在往好的方向走，但每一天过的都不好，就是这个状态 以前在家的时候，吃到过一道菜，我不知道名字，但是我记得里面加了很多很多的香樟叶，因此有一股非常特殊的香味。在西安，我只在植物园的温室里看见过樟树，但是有一次吃饭的时候，我尝到特别相似的味道。但是我不知道那是什么菜，好想再吃一次。就在今天半夜，这个莫名其妙的念头萦绕不散，就是睡不着，好想跳楼，一走了之。 最近很开心是因为 三年未见的发小终于来找我了，并且带我吃带我玩，足足浪了五天 当自己在意的人写下自己的名字时心里总有一种悸动，我还记得我很想把你的名字写的很漂亮的时候 高中有一个姑娘，有一次借走了我的英语词典。他拿回来后给我说，以后你的名字应该这么写。他在我的词典上工工整整地用繁体字写了我的名字。其实这件事令我高兴了好久好久，但是我不想让他知道，结果最后我忘记了她的模样 我这辈子，可能最遗憾的就是高考了。不是因为我考不好，我运气一直很好。我只是很在意数学老师那句话:你连高考都不认真对待，你以后做什么都不会认真的。 晚上我出去买东西，路上一个乞丐向我要钱，我说不给，他就用很脏的话骂我。我很害怕，回去的时候，我都不敢走那条路了。然后回来后我就很伤心，因为我发现自己很智障很懦弱。 杨梅酒甜蜜蜜美滋滋特别是泡了整整两年的戾气全无，咕噜咕噜，一不小心就会喝醉死过去 一个地方安定下来以后习惯后，过日子其实在哪里都差不了太多 总觉得自己只要不动就会离别人远去然后越想越伤感但还是一动不动，然后等着等着等绝交，这可能是只要自己过不好就觉得很好的思想 每次一醒我就跟自己说，再睡睡，反正也没人等我，然后就这样连绵睡了17个小时。再睡睡罢，反正也没人等我 每次想到我读书一点都不认真，姑姑还对我这么好，我就想哭 我感觉自己很垃圾学习一点都不认真。拧个黄桃罐头把手拧断了，又有一段时间不能学习了。 我也不想说这个世界什么坏话了，都是我不好 我每次都要点拔丝红薯，今天终于有人帮我吃完了。我很讨厌自己经常要点这个自己都不是很喜欢，每次都吃不完的菜。如果一个人会帮我吃拔丝红薯，还从来不会说我什么，下次吃饭还会叫我，那么这个人真的好棒 我明天又要开始早起了不用为我惋惜这不值得我知道你过得也苦去你妈你敢说你不苦试试 我不需要上帝保佑我，要有种他就捅我 我发现我所有的焦虑都源于害怕被别人发现我是个傻逼还口口相传 我每个白天呼哧呼哧自然笑的次数也挺多的但我就是不承认自己是开心的我是不是太不对了呼哧呼哧呼哧 一个早上无所事是，在翻走饭的微博，真有趣，要是我生活中碰到了和我性格一模一样的人，可能最终的结果就是擦肩而过吧，因为我压根不想认识这种人 终于坐了一回地面上的地铁好久好久以前在上海坐过好激动在西安能见到这么大的湖看着风景很开心只是今天阳光太强 刚看到一条洒水车的微博，想起来一件事。有一次两个同学来玩，我们在一天桥上看见一辆红色的洒水车。它真的很神奇，是朝屁股后面洒的。他们说，原来西安的洒水车是这样的洒水阿，第一次见。然后我说，我也第一次见。 近几天练字哈 刚坐下2秒钟，就觉得自己傻了一大截。"},{"path":"/about/index.html","content":"MerryJingle，快乐的铃铛，为毕业发愁中，会点C++和CUDA，研究流固耦合问题朋友圈关于留言相册运动 微博动态去啊啊 博客动态 此页面使用了 Run Page 项目。了解详情 跑步打卡跑步路线图 FEniCS 官方 FEniCS ProjectA popular open-source computing platform for solving PDEsSource Codehttps://github.com/FEniCS/dolfinxSource Code (Old)https://bitbucket.org/fenics-project/FEniCS ForumForum for FEniCS projectFEniCS Tutoriala concise overview of the functionality of FEniCSBasixA finite element definition and tabulation runtime libraryUFLThe Unified Form Language for PDEs FEniCS 第三方教程 FEniCS固体力学Numerical tours of continuum mechanics using FEniCSJørgen S. Dokkenhttps://jsdokken.com/Hans Petter Langtangenhttps://hplgit.github.io/ PT 站 torrentleech国外的PT站HDDolby国内的PT站ChatGPT一种全新的 AI 聊天机器人 博客主题 Stellar主题使用教程Hexo 模板Hux BlogJeykll 模板 云服务 七牛云https://www.qiniu.com阿里云https://www.aliyun.com又拍云https://www.upyun.comCloudflarehttps://www.cloudflare.com"},{"path":"/friends/index.html","content":"MerryJingle，快乐的铃铛，为毕业发愁中，会点C++和CUDA，研究流固耦合问题朋友圈关于留言相册运动 这些是我的赛博朋友 他们在干什么呀~ Xaoxuu Skyreeves 是非题 星日语 添加友链的方法 点击打开第一步：新建 Issue新建GitHub Issue按照模板格式填写并提交。为了提高图片加载速度，建议优化头像：打开压缩图上传自己的头像，将图片尺寸调整到 96px 后下载。将压缩后的图片上传到去不图床并使用此图片链接作为头像。第二步：添加友链并等待管理员审核请添加本站到您的友链中，如果您也使用 issue 作为友链源，只需要告知您的友链源仓库即可。title: MerryJingleavatar: https://avatars.githubusercontent.com/u/115222128url: https://blog.pengfeima.cn/screenshot: https://githubimages.pengfeima.cn/images/202211172254234.pngdescription: 快乐的铃铛待管理员添加 active 标签后即可生效。如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客更新。如果无法修改，可以重新创建一个。"},{"path":"/gallery/album-1.html","content":"MerryJingle，快乐的铃铛，为毕业发愁中，会点C++和CUDA，研究流固耦合问题朋友圈关于留言相册运动"},{"path":"/gallery/index.html","content":"MerryJingle，快乐的铃铛，为毕业发愁中，会点C++和CUDA，研究流固耦合问题朋友圈关于留言相册运动 第一天 这里没有对齐是因为有些截图本身就有透明边缘。 .md-text img { border-radius:0px } 原来的图片插件。 这是一张示例图片 一些长宽相同的图片的排版。 一些长宽不同的图片的排版。 以下是一些更加混乱的图片，看看它们的排版。"},{"path":"/run/index.html","content":"MerryJingle，快乐的铃铛，为毕业发愁中，会点C++和CUDA，研究流固耦合问题朋友圈关于留言相册运动 跑步打卡 跑步路线图"},{"path":"/wiki/multigrid/index.html","content":"前言"},{"title":"Hello World","path":"/wiki/multigrid/文章3.html","content":"问题描述"},{"title":"站点美化点点滴滴","path":"/wiki/notes/index.html","content":"前言 大风的法俄大额jjjj fadfa dfafefd 学长大啊 这条内容为静态数据这条内容为静态数据，静态数据在 deploy 时就已经确定了。 // ssint a=0 vunn ukhuhhjbjhkbk,n,’ [kjnhby]content [color:red] SkyReeves Stellar主题自定义侧边栏教程「萌新向」 wiki的作用： http://www.example.com/notes/站点美化/文章3.html"},{"title":"Hello Wordfadfadsfald","path":"/wiki/notes/游戏/文章1.html","content":"文章1"},{"title":"Hello Wordfadfadsfald","path":"/wiki/notes/游戏/文章2.html","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start HHHHHHHaahahaahh Create a new post $ hexo new &quot;M . y New Post&quot; More info: Writing Run server $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to remote sites $ hexo deploy More info: Deployment"},{"title":"Hello Wordfadfadsfald","path":"/wiki/notes/站点美化/文章3.html","content":"文章1"},{"title":"Hello Wordfadfadsfald","path":"/wiki/notes/站点美化/文章4.html","content":"文章1"}]